"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/canvg";
exports.ids = ["vendor-chunks/canvg"];
exports.modules = {

/***/ "(ssr)/./node_modules/canvg/dist/index.js":
/*!******************************************!*\
  !*** ./node_modules/canvg/dist/index.js ***!
  \******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AElement: () => (/* binding */ AElement),\n/* harmony export */   AnimateColorElement: () => (/* binding */ AnimateColorElement),\n/* harmony export */   AnimateElement: () => (/* binding */ AnimateElement),\n/* harmony export */   AnimateTransformElement: () => (/* binding */ AnimateTransformElement),\n/* harmony export */   BoundingBox: () => (/* binding */ BoundingBox),\n/* harmony export */   CB1: () => (/* binding */ CB1),\n/* harmony export */   CB2: () => (/* binding */ CB2),\n/* harmony export */   CB3: () => (/* binding */ CB3),\n/* harmony export */   CB4: () => (/* binding */ CB4),\n/* harmony export */   Canvg: () => (/* binding */ Canvg),\n/* harmony export */   CircleElement: () => (/* binding */ CircleElement),\n/* harmony export */   ClipPathElement: () => (/* binding */ ClipPathElement),\n/* harmony export */   DefsElement: () => (/* binding */ DefsElement),\n/* harmony export */   DescElement: () => (/* binding */ DescElement),\n/* harmony export */   Document: () => (/* binding */ Document),\n/* harmony export */   Element: () => (/* binding */ Element),\n/* harmony export */   EllipseElement: () => (/* binding */ EllipseElement),\n/* harmony export */   FeColorMatrixElement: () => (/* binding */ FeColorMatrixElement),\n/* harmony export */   FeCompositeElement: () => (/* binding */ FeCompositeElement),\n/* harmony export */   FeDropShadowElement: () => (/* binding */ FeDropShadowElement),\n/* harmony export */   FeGaussianBlurElement: () => (/* binding */ FeGaussianBlurElement),\n/* harmony export */   FeMorphologyElement: () => (/* binding */ FeMorphologyElement),\n/* harmony export */   FilterElement: () => (/* binding */ FilterElement),\n/* harmony export */   Font: () => (/* binding */ Font),\n/* harmony export */   FontElement: () => (/* binding */ FontElement),\n/* harmony export */   FontFaceElement: () => (/* binding */ FontFaceElement),\n/* harmony export */   GElement: () => (/* binding */ GElement),\n/* harmony export */   GlyphElement: () => (/* binding */ GlyphElement),\n/* harmony export */   GradientElement: () => (/* binding */ GradientElement),\n/* harmony export */   ImageElement: () => (/* binding */ ImageElement),\n/* harmony export */   LineElement: () => (/* binding */ LineElement),\n/* harmony export */   LinearGradientElement: () => (/* binding */ LinearGradientElement),\n/* harmony export */   MarkerElement: () => (/* binding */ MarkerElement),\n/* harmony export */   MaskElement: () => (/* binding */ MaskElement),\n/* harmony export */   Matrix: () => (/* binding */ Matrix),\n/* harmony export */   MissingGlyphElement: () => (/* binding */ MissingGlyphElement),\n/* harmony export */   Mouse: () => (/* binding */ Mouse),\n/* harmony export */   PSEUDO_ZERO: () => (/* binding */ PSEUDO_ZERO),\n/* harmony export */   Parser: () => (/* binding */ Parser),\n/* harmony export */   PathElement: () => (/* binding */ PathElement),\n/* harmony export */   PathParser: () => (/* binding */ PathParser),\n/* harmony export */   PatternElement: () => (/* binding */ PatternElement),\n/* harmony export */   Point: () => (/* binding */ Point),\n/* harmony export */   PolygonElement: () => (/* binding */ PolygonElement),\n/* harmony export */   PolylineElement: () => (/* binding */ PolylineElement),\n/* harmony export */   Property: () => (/* binding */ Property),\n/* harmony export */   QB1: () => (/* binding */ QB1),\n/* harmony export */   QB2: () => (/* binding */ QB2),\n/* harmony export */   QB3: () => (/* binding */ QB3),\n/* harmony export */   RadialGradientElement: () => (/* binding */ RadialGradientElement),\n/* harmony export */   RectElement: () => (/* binding */ RectElement),\n/* harmony export */   RenderedElement: () => (/* binding */ RenderedElement),\n/* harmony export */   Rotate: () => (/* binding */ Rotate),\n/* harmony export */   SVGElement: () => (/* binding */ SVGElement),\n/* harmony export */   SVGFontLoader: () => (/* binding */ SVGFontLoader),\n/* harmony export */   Scale: () => (/* binding */ Scale),\n/* harmony export */   Screen: () => (/* binding */ Screen),\n/* harmony export */   Skew: () => (/* binding */ Skew),\n/* harmony export */   SkewX: () => (/* binding */ SkewX),\n/* harmony export */   SkewY: () => (/* binding */ SkewY),\n/* harmony export */   StopElement: () => (/* binding */ StopElement),\n/* harmony export */   StyleElement: () => (/* binding */ StyleElement),\n/* harmony export */   SymbolElement: () => (/* binding */ SymbolElement),\n/* harmony export */   TRefElement: () => (/* binding */ TRefElement),\n/* harmony export */   TSpanElement: () => (/* binding */ TSpanElement),\n/* harmony export */   TextElement: () => (/* binding */ TextElement),\n/* harmony export */   TextPathElement: () => (/* binding */ TextPathElement),\n/* harmony export */   TitleElement: () => (/* binding */ TitleElement),\n/* harmony export */   Transform: () => (/* binding */ Transform),\n/* harmony export */   Translate: () => (/* binding */ Translate),\n/* harmony export */   UnknownElement: () => (/* binding */ UnknownElement),\n/* harmony export */   UseElement: () => (/* binding */ UseElement),\n/* harmony export */   ViewPort: () => (/* binding */ ViewPort),\n/* harmony export */   compressSpaces: () => (/* binding */ compressSpaces),\n/* harmony export */   elements: () => (/* binding */ elements),\n/* harmony export */   getSelectorSpecificity: () => (/* binding */ getSelectorSpecificity),\n/* harmony export */   normalizeAttributeName: () => (/* binding */ normalizeAttributeName),\n/* harmony export */   normalizeColor: () => (/* binding */ normalizeColor),\n/* harmony export */   parseExternalUrl: () => (/* binding */ parseExternalUrl),\n/* harmony export */   presets: () => (/* binding */ index),\n/* harmony export */   toMatrixValue: () => (/* binding */ toMatrixValue),\n/* harmony export */   toNumbers: () => (/* binding */ toNumbers),\n/* harmony export */   trimLeft: () => (/* binding */ trimLeft),\n/* harmony export */   trimRight: () => (/* binding */ trimRight),\n/* harmony export */   vectorMagnitude: () => (/* binding */ vectorMagnitude),\n/* harmony export */   vectorsAngle: () => (/* binding */ vectorsAngle),\n/* harmony export */   vectorsRatio: () => (/* binding */ vectorsRatio)\n/* harmony export */ });\n/* harmony import */ var raf__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! raf */ \"(ssr)/./node_modules/raf/index.js\");\n/* harmony import */ var rgbcolor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! rgbcolor */ \"(ssr)/./node_modules/rgbcolor/index.js\");\n/* harmony import */ var svg_pathdata__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! svg-pathdata */ \"(ssr)/./node_modules/svg-pathdata/lib/SVGPathData.module.js\");\n/* harmony import */ var stackblur_canvas__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! stackblur-canvas */ \"(ssr)/./node_modules/stackblur-canvas/dist/stackblur-es.js\");\n\n\n\n\n\n/**\n * Options preset for `OffscreenCanvas`.\n * @param config - Preset requirements.\n * @param config.DOMParser - XML/HTML parser from string into DOM Document.\n * @returns Preset object.\n */ function offscreen() {\n    let { DOMParser: DOMParserFallback  } = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};\n    const preset = {\n        window: null,\n        ignoreAnimation: true,\n        ignoreMouse: true,\n        DOMParser: DOMParserFallback,\n        createCanvas (width, height) {\n            return new OffscreenCanvas(width, height);\n        },\n        async createImage (url) {\n            const response = await fetch(url);\n            const blob = await response.blob();\n            const img = await createImageBitmap(blob);\n            return img;\n        }\n    };\n    if (typeof globalThis.DOMParser !== 'undefined' || typeof DOMParserFallback === 'undefined') {\n        Reflect.deleteProperty(preset, 'DOMParser');\n    }\n    return preset;\n}\n\n/**\n * Options preset for `node-canvas`.\n * @param config - Preset requirements.\n * @param config.DOMParser - XML/HTML parser from string into DOM Document.\n * @param config.canvas - `node-canvas` exports.\n * @param config.fetch - WHATWG-compatible `fetch` function.\n * @returns Preset object.\n */ function node(param) {\n    let { DOMParser , canvas , fetch  } = param;\n    return {\n        window: null,\n        ignoreAnimation: true,\n        ignoreMouse: true,\n        DOMParser,\n        fetch,\n        createCanvas: canvas.createCanvas,\n        createImage: canvas.loadImage\n    };\n}\n\nvar index = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  offscreen: offscreen,\n  node: node\n});\n\n/**\n * HTML-safe compress white-spaces.\n * @param str - String to compress.\n * @returns String.\n */ function compressSpaces(str) {\n    return str.replace(/(?!\\u3000)\\s+/gm, ' ');\n}\n/**\n * HTML-safe left trim.\n * @param str - String to trim.\n * @returns String.\n */ function trimLeft(str) {\n    return str.replace(/^[\\n \\t]+/, '');\n}\n/**\n * HTML-safe right trim.\n * @param str - String to trim.\n * @returns String.\n */ function trimRight(str) {\n    return str.replace(/[\\n \\t]+$/, '');\n}\n/**\n * String to numbers array.\n * @param str - Numbers string.\n * @returns Numbers array.\n */ function toNumbers(str) {\n    const matches = str.match(/-?(\\d+(?:\\.\\d*(?:[eE][+-]?\\d+)?)?|\\.\\d+)(?=\\D|$)/gm);\n    return matches ? matches.map(parseFloat) : [];\n}\n/**\n * String to matrix value.\n * @param str - Numbers string.\n * @returns Matrix value.\n */ function toMatrixValue(str) {\n    const numbers = toNumbers(str);\n    const matrix = [\n        numbers[0] || 0,\n        numbers[1] || 0,\n        numbers[2] || 0,\n        numbers[3] || 0,\n        numbers[4] || 0,\n        numbers[5] || 0\n    ];\n    return matrix;\n}\n// Microsoft Edge fix\nconst allUppercase = /^[A-Z-]+$/;\n/**\n * Normalize attribute name.\n * @param name - Attribute name.\n * @returns Normalized attribute name.\n */ function normalizeAttributeName(name) {\n    if (allUppercase.test(name)) {\n        return name.toLowerCase();\n    }\n    return name;\n}\n/**\n * Parse external URL.\n * @param url - CSS url string.\n * @returns Parsed URL.\n */ function parseExternalUrl(url) {\n    //                      single quotes [2]\n    //                      v         double quotes [3]\n    //                      v         v         no quotes [4]\n    //                      v         v         v\n    const urlMatch = /url\\(('([^']+)'|\"([^\"]+)\"|([^'\")]+))\\)/.exec(url);\n    if (!urlMatch) {\n        return '';\n    }\n    return urlMatch[2] || urlMatch[3] || urlMatch[4] || '';\n}\n/**\n * Transform floats to integers in rgb colors.\n * @param color - Color to normalize.\n * @returns Normalized color.\n */ function normalizeColor(color) {\n    if (!color.startsWith('rgb')) {\n        return color;\n    }\n    let rgbParts = 3;\n    const normalizedColor = color.replace(/\\d+(\\.\\d+)?/g, (num, isFloat)=>(rgbParts--) && isFloat ? String(Math.round(parseFloat(num))) : num\n    );\n    return normalizedColor;\n}\n\n// slightly modified version of https://github.com/keeganstreet/specificity/blob/master/specificity.js\nconst attributeRegex = /(\\[[^\\]]+\\])/g;\nconst idRegex = /(#[^\\s+>~.[:]+)/g;\nconst classRegex = /(\\.[^\\s+>~.[:]+)/g;\nconst pseudoElementRegex = /(::[^\\s+>~.[:]+|:first-line|:first-letter|:before|:after)/gi;\nconst pseudoClassWithBracketsRegex = /(:[\\w-]+\\([^)]*\\))/gi;\nconst pseudoClassRegex = /(:[^\\s+>~.[:]+)/g;\nconst elementRegex = /([^\\s+>~.[:]+)/g;\nfunction findSelectorMatch(selector, regex) {\n    const matches = regex.exec(selector);\n    if (!matches) {\n        return [\n            selector,\n            0\n        ];\n    }\n    return [\n        selector.replace(regex, ' '),\n        matches.length\n    ];\n}\n/**\n * Measure selector specificity.\n * @param selector - Selector to measure.\n * @returns Specificity.\n */ function getSelectorSpecificity(selector) {\n    const specificity = [\n        0,\n        0,\n        0\n    ];\n    let currentSelector = selector.replace(/:not\\(([^)]*)\\)/g, '     $1 ').replace(/{[\\s\\S]*/gm, ' ');\n    let delta = 0;\n    [currentSelector, delta] = findSelectorMatch(currentSelector, attributeRegex);\n    specificity[1] += delta;\n    [currentSelector, delta] = findSelectorMatch(currentSelector, idRegex);\n    specificity[0] += delta;\n    [currentSelector, delta] = findSelectorMatch(currentSelector, classRegex);\n    specificity[1] += delta;\n    [currentSelector, delta] = findSelectorMatch(currentSelector, pseudoElementRegex);\n    specificity[2] += delta;\n    [currentSelector, delta] = findSelectorMatch(currentSelector, pseudoClassWithBracketsRegex);\n    specificity[1] += delta;\n    [currentSelector, delta] = findSelectorMatch(currentSelector, pseudoClassRegex);\n    specificity[1] += delta;\n    currentSelector = currentSelector.replace(/[*\\s+>~]/g, ' ').replace(/[#.]/g, ' ');\n    [currentSelector, delta] = findSelectorMatch(currentSelector, elementRegex) // lgtm [js/useless-assignment-to-local]\n    ;\n    specificity[2] += delta;\n    return specificity.join('');\n}\n\nconst PSEUDO_ZERO = 0.00000001;\n/**\n * Vector magnitude.\n * @param v\n * @returns Number result.\n */ function vectorMagnitude(v) {\n    return Math.sqrt(Math.pow(v[0], 2) + Math.pow(v[1], 2));\n}\n/**\n * Ratio between two vectors.\n * @param u\n * @param v\n * @returns Number result.\n */ function vectorsRatio(u, v) {\n    return (u[0] * v[0] + u[1] * v[1]) / (vectorMagnitude(u) * vectorMagnitude(v));\n}\n/**\n * Angle between two vectors.\n * @param u\n * @param v\n * @returns Number result.\n */ function vectorsAngle(u, v) {\n    return (u[0] * v[1] < u[1] * v[0] ? -1 : 1) * Math.acos(vectorsRatio(u, v));\n}\nfunction CB1(t) {\n    return t * t * t;\n}\nfunction CB2(t) {\n    return 3 * t * t * (1 - t);\n}\nfunction CB3(t) {\n    return 3 * t * (1 - t) * (1 - t);\n}\nfunction CB4(t) {\n    return (1 - t) * (1 - t) * (1 - t);\n}\nfunction QB1(t) {\n    return t * t;\n}\nfunction QB2(t) {\n    return 2 * t * (1 - t);\n}\nfunction QB3(t) {\n    return (1 - t) * (1 - t);\n}\n\nclass Property {\n    static empty(document) {\n        return new Property(document, 'EMPTY', '');\n    }\n    split() {\n        let separator = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : ' ';\n        const { document , name  } = this;\n        return compressSpaces(this.getString()).trim().split(separator).map((value)=>new Property(document, name, value)\n        );\n    }\n    hasValue(zeroIsValue) {\n        const value = this.value;\n        return value !== null && value !== '' && (zeroIsValue || value !== 0) && typeof value !== 'undefined';\n    }\n    isString(regexp) {\n        const { value  } = this;\n        const result = typeof value === 'string';\n        if (!result || !regexp) {\n            return result;\n        }\n        return regexp.test(value);\n    }\n    isUrlDefinition() {\n        return this.isString(/^url\\(/);\n    }\n    isPixels() {\n        if (!this.hasValue()) {\n            return false;\n        }\n        const asString = this.getString();\n        switch(true){\n            case asString.endsWith('px'):\n            case /^[0-9]+$/.test(asString):\n                return true;\n            default:\n                return false;\n        }\n    }\n    setValue(value) {\n        this.value = value;\n        return this;\n    }\n    getValue(def) {\n        if (typeof def === 'undefined' || this.hasValue()) {\n            return this.value;\n        }\n        return def;\n    }\n    getNumber(def) {\n        if (!this.hasValue()) {\n            if (typeof def === 'undefined') {\n                return 0;\n            }\n            // @ts-expect-error Parse unknown value.\n            return parseFloat(def);\n        }\n        const { value  } = this;\n        // @ts-expect-error Parse unknown value.\n        let n = parseFloat(value);\n        if (this.isString(/%$/)) {\n            n /= 100;\n        }\n        return n;\n    }\n    getString(def) {\n        if (typeof def === 'undefined' || this.hasValue()) {\n            return typeof this.value === 'undefined' ? '' : String(this.value);\n        }\n        return String(def);\n    }\n    getColor(def) {\n        let color = this.getString(def);\n        if (this.isNormalizedColor) {\n            return color;\n        }\n        this.isNormalizedColor = true;\n        color = normalizeColor(color);\n        this.value = color;\n        return color;\n    }\n    getDpi() {\n        return 96 // TODO: compute?\n        ;\n    }\n    getRem() {\n        return this.document.rootEmSize;\n    }\n    getEm() {\n        return this.document.emSize;\n    }\n    getUnits() {\n        return this.getString().replace(/[0-9.-]/g, '');\n    }\n    getPixels(axisOrIsFontSize) {\n        let processPercent = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;\n        if (!this.hasValue()) {\n            return 0;\n        }\n        const [axis, isFontSize] = typeof axisOrIsFontSize === 'boolean' ? [\n            undefined,\n            axisOrIsFontSize\n        ] : [\n            axisOrIsFontSize\n        ];\n        const { viewPort  } = this.document.screen;\n        switch(true){\n            case this.isString(/vmin$/):\n                return this.getNumber() / 100 * Math.min(viewPort.computeSize('x'), viewPort.computeSize('y'));\n            case this.isString(/vmax$/):\n                return this.getNumber() / 100 * Math.max(viewPort.computeSize('x'), viewPort.computeSize('y'));\n            case this.isString(/vw$/):\n                return this.getNumber() / 100 * viewPort.computeSize('x');\n            case this.isString(/vh$/):\n                return this.getNumber() / 100 * viewPort.computeSize('y');\n            case this.isString(/rem$/):\n                return this.getNumber() * this.getRem();\n            case this.isString(/em$/):\n                return this.getNumber() * this.getEm();\n            case this.isString(/ex$/):\n                return this.getNumber() * this.getEm() / 2;\n            case this.isString(/px$/):\n                return this.getNumber();\n            case this.isString(/pt$/):\n                return this.getNumber() * this.getDpi() * (1 / 72);\n            case this.isString(/pc$/):\n                return this.getNumber() * 15;\n            case this.isString(/cm$/):\n                return this.getNumber() * this.getDpi() / 2.54;\n            case this.isString(/mm$/):\n                return this.getNumber() * this.getDpi() / 25.4;\n            case this.isString(/in$/):\n                return this.getNumber() * this.getDpi();\n            case this.isString(/%$/) && isFontSize:\n                return this.getNumber() * this.getEm();\n            case this.isString(/%$/):\n                return this.getNumber() * viewPort.computeSize(axis);\n            default:\n                {\n                    const n = this.getNumber();\n                    if (processPercent && n < 1) {\n                        return n * viewPort.computeSize(axis);\n                    }\n                    return n;\n                }\n        }\n    }\n    getMilliseconds() {\n        if (!this.hasValue()) {\n            return 0;\n        }\n        if (this.isString(/ms$/)) {\n            return this.getNumber();\n        }\n        return this.getNumber() * 1000;\n    }\n    getRadians() {\n        if (!this.hasValue()) {\n            return 0;\n        }\n        switch(true){\n            case this.isString(/deg$/):\n                return this.getNumber() * (Math.PI / 180);\n            case this.isString(/grad$/):\n                return this.getNumber() * (Math.PI / 200);\n            case this.isString(/rad$/):\n                return this.getNumber();\n            default:\n                return this.getNumber() * (Math.PI / 180);\n        }\n    }\n    getDefinition() {\n        const asString = this.getString();\n        const match = /#([^)'\"]+)/.exec(asString);\n        const name = (match === null || match === void 0 ? void 0 : match[1]) || asString;\n        return this.document.definitions[name];\n    }\n    getFillStyleDefinition(element, opacity) {\n        let def = this.getDefinition();\n        if (!def) {\n            return null;\n        }\n        // gradient\n        if (typeof def.createGradient === 'function' && 'getBoundingBox' in element) {\n            return def.createGradient(this.document.ctx, element, opacity);\n        }\n        // pattern\n        if (typeof def.createPattern === 'function') {\n            if (def.getHrefAttribute().hasValue()) {\n                const patternTransform = def.getAttribute('patternTransform');\n                def = def.getHrefAttribute().getDefinition();\n                if (def && patternTransform.hasValue()) {\n                    def.getAttribute('patternTransform', true).setValue(patternTransform.value);\n                }\n            }\n            if (def) {\n                return def.createPattern(this.document.ctx, element, opacity);\n            }\n        }\n        return null;\n    }\n    getTextBaseline() {\n        if (!this.hasValue()) {\n            return null;\n        }\n        const key = this.getString();\n        return Property.textBaselineMapping[key] || null;\n    }\n    addOpacity(opacity) {\n        let value = this.getColor();\n        const len = value.length;\n        let commas = 0;\n        // Simulate old RGBColor version, which can't parse rgba.\n        for(let i = 0; i < len; i++){\n            if (value[i] === ',') {\n                commas++;\n            }\n            if (commas === 3) {\n                break;\n            }\n        }\n        if (opacity.hasValue() && this.isString() && commas !== 3) {\n            const color = new rgbcolor__WEBPACK_IMPORTED_MODULE_1__(value);\n            if (color.ok) {\n                color.alpha = opacity.getNumber();\n                value = color.toRGBA();\n            }\n        }\n        return new Property(this.document, this.name, value);\n    }\n    constructor(document, name, value){\n        this.document = document;\n        this.name = name;\n        this.value = value;\n        this.isNormalizedColor = false;\n    }\n}\nProperty.textBaselineMapping = {\n    'baseline': 'alphabetic',\n    'before-edge': 'top',\n    'text-before-edge': 'top',\n    'middle': 'middle',\n    'central': 'middle',\n    'after-edge': 'bottom',\n    'text-after-edge': 'bottom',\n    'ideographic': 'ideographic',\n    'alphabetic': 'alphabetic',\n    'hanging': 'hanging',\n    'mathematical': 'alphabetic'\n};\n\nclass ViewPort {\n    clear() {\n        this.viewPorts = [];\n    }\n    setCurrent(width, height) {\n        this.viewPorts.push({\n            width,\n            height\n        });\n    }\n    removeCurrent() {\n        this.viewPorts.pop();\n    }\n    getRoot() {\n        const [root] = this.viewPorts;\n        if (!root) {\n            return getDefault();\n        }\n        return root;\n    }\n    getCurrent() {\n        const { viewPorts  } = this;\n        const current = viewPorts[viewPorts.length - 1];\n        if (!current) {\n            return getDefault();\n        }\n        return current;\n    }\n    get width() {\n        return this.getCurrent().width;\n    }\n    get height() {\n        return this.getCurrent().height;\n    }\n    computeSize(d) {\n        if (typeof d === 'number') {\n            return d;\n        }\n        if (d === 'x') {\n            return this.width;\n        }\n        if (d === 'y') {\n            return this.height;\n        }\n        return Math.sqrt(Math.pow(this.width, 2) + Math.pow(this.height, 2)) / Math.sqrt(2);\n    }\n    constructor(){\n        this.viewPorts = [];\n    }\n}\nViewPort.DEFAULT_VIEWPORT_WIDTH = 800;\nViewPort.DEFAULT_VIEWPORT_HEIGHT = 600;\nfunction getDefault() {\n    return {\n        width: ViewPort.DEFAULT_VIEWPORT_WIDTH,\n        height: ViewPort.DEFAULT_VIEWPORT_HEIGHT\n    };\n}\n\nclass Point {\n    static parse(point) {\n        let defaultValue = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;\n        const [x = defaultValue, y = defaultValue] = toNumbers(point);\n        return new Point(x, y);\n    }\n    static parseScale(scale) {\n        let defaultValue = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1;\n        const [x = defaultValue, y = x] = toNumbers(scale);\n        return new Point(x, y);\n    }\n    static parsePath(path) {\n        const points = toNumbers(path);\n        const len = points.length;\n        const pathPoints = [];\n        for(let i = 0; i < len; i += 2){\n            pathPoints.push(new Point(points[i], points[i + 1]));\n        }\n        return pathPoints;\n    }\n    angleTo(point) {\n        return Math.atan2(point.y - this.y, point.x - this.x);\n    }\n    applyTransform(transform) {\n        const { x , y  } = this;\n        const xp = x * transform[0] + y * transform[2] + transform[4];\n        const yp = x * transform[1] + y * transform[3] + transform[5];\n        this.x = xp;\n        this.y = yp;\n    }\n    constructor(x, y){\n        this.x = x;\n        this.y = y;\n    }\n}\n\nclass Mouse {\n    isWorking() {\n        return this.working;\n    }\n    start() {\n        if (this.working) {\n            return;\n        }\n        const { screen , onClick , onMouseMove  } = this;\n        const canvas = screen.ctx.canvas;\n        canvas.onclick = onClick;\n        canvas.onmousemove = onMouseMove;\n        this.working = true;\n    }\n    stop() {\n        if (!this.working) {\n            return;\n        }\n        const canvas = this.screen.ctx.canvas;\n        this.working = false;\n        canvas.onclick = null;\n        canvas.onmousemove = null;\n    }\n    hasEvents() {\n        return this.working && this.events.length > 0;\n    }\n    runEvents() {\n        if (!this.working) {\n            return;\n        }\n        const { screen: document , events , eventElements  } = this;\n        const { style  } = document.ctx.canvas;\n        let element;\n        // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n        if (style) {\n            style.cursor = '';\n        }\n        events.forEach((param, i)=>{\n            let { run  } = param;\n            element = eventElements[i];\n            while(element){\n                run(element);\n                element = element.parent;\n            }\n        });\n        // done running, clear\n        this.events = [];\n        this.eventElements = [];\n    }\n    checkPath(element, ctx) {\n        if (!this.working || !ctx) {\n            return;\n        }\n        const { events , eventElements  } = this;\n        events.forEach((param, i)=>{\n            let { x , y  } = param;\n            // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n            if (!eventElements[i] && ctx.isPointInPath && ctx.isPointInPath(x, y)) {\n                eventElements[i] = element;\n            }\n        });\n    }\n    checkBoundingBox(element, boundingBox) {\n        if (!this.working || !boundingBox) {\n            return;\n        }\n        const { events , eventElements  } = this;\n        events.forEach((param, i)=>{\n            let { x , y  } = param;\n            if (!eventElements[i] && boundingBox.isPointInBox(x, y)) {\n                eventElements[i] = element;\n            }\n        });\n    }\n    mapXY(x, y) {\n        const { window , ctx  } = this.screen;\n        const point = new Point(x, y);\n        let element = ctx.canvas;\n        while(element){\n            point.x -= element.offsetLeft;\n            point.y -= element.offsetTop;\n            element = element.offsetParent;\n        }\n        if (window === null || window === void 0 ? void 0 : window.scrollX) {\n            point.x += window.scrollX;\n        }\n        if (window === null || window === void 0 ? void 0 : window.scrollY) {\n            point.y += window.scrollY;\n        }\n        return point;\n    }\n    onClick(event) {\n        const { x , y  } = this.mapXY(event.clientX, event.clientY);\n        this.events.push({\n            type: 'onclick',\n            x,\n            y,\n            run (eventTarget) {\n                if (eventTarget.onClick) {\n                    eventTarget.onClick();\n                }\n            }\n        });\n    }\n    onMouseMove(event) {\n        const { x , y  } = this.mapXY(event.clientX, event.clientY);\n        this.events.push({\n            type: 'onmousemove',\n            x,\n            y,\n            run (eventTarget) {\n                if (eventTarget.onMouseMove) {\n                    eventTarget.onMouseMove();\n                }\n            }\n        });\n    }\n    constructor(screen){\n        this.screen = screen;\n        this.working = false;\n        this.events = [];\n        this.eventElements = [];\n        this.onClick = this.onClick.bind(this);\n        this.onMouseMove = this.onMouseMove.bind(this);\n    }\n}\n\nconst defaultWindow = typeof window !== 'undefined' ? window : null;\nconst defaultFetch$1 = typeof fetch !== 'undefined' ? fetch.bind(undefined) // `fetch` depends on context: `someObject.fetch(...)` will throw error.\n : undefined;\nclass Screen {\n    wait(checker) {\n        this.waits.push(checker);\n    }\n    ready() {\n        // eslint-disable-next-line @typescript-eslint/no-misused-promises\n        if (!this.readyPromise) {\n            return Promise.resolve();\n        }\n        return this.readyPromise;\n    }\n    isReady() {\n        if (this.isReadyLock) {\n            return true;\n        }\n        const isReadyLock = this.waits.every((_)=>_()\n        );\n        if (isReadyLock) {\n            this.waits = [];\n            if (this.resolveReady) {\n                this.resolveReady();\n            }\n        }\n        this.isReadyLock = isReadyLock;\n        return isReadyLock;\n    }\n    setDefaults(ctx) {\n        // initial values and defaults\n        ctx.strokeStyle = 'rgba(0,0,0,0)';\n        ctx.lineCap = 'butt';\n        ctx.lineJoin = 'miter';\n        ctx.miterLimit = 4;\n    }\n    setViewBox(param) {\n        let { document , ctx , aspectRatio , width , desiredWidth , height , desiredHeight , minX =0 , minY =0 , refX , refY , clip =false , clipX =0 , clipY =0  } = param;\n        // aspect ratio - http://www.w3.org/TR/SVG/coords.html#PreserveAspectRatioAttribute\n        const cleanAspectRatio = compressSpaces(aspectRatio).replace(/^defer\\s/, '') // ignore defer\n        ;\n        const [aspectRatioAlign, aspectRatioMeetOrSlice] = cleanAspectRatio.split(' ');\n        const align = aspectRatioAlign || 'xMidYMid';\n        const meetOrSlice = aspectRatioMeetOrSlice || 'meet';\n        // calculate scale\n        const scaleX = width / desiredWidth;\n        const scaleY = height / desiredHeight;\n        const scaleMin = Math.min(scaleX, scaleY);\n        const scaleMax = Math.max(scaleX, scaleY);\n        let finalDesiredWidth = desiredWidth;\n        let finalDesiredHeight = desiredHeight;\n        if (meetOrSlice === 'meet') {\n            finalDesiredWidth *= scaleMin;\n            finalDesiredHeight *= scaleMin;\n        }\n        if (meetOrSlice === 'slice') {\n            finalDesiredWidth *= scaleMax;\n            finalDesiredHeight *= scaleMax;\n        }\n        const refXProp = new Property(document, 'refX', refX);\n        const refYProp = new Property(document, 'refY', refY);\n        const hasRefs = refXProp.hasValue() && refYProp.hasValue();\n        if (hasRefs) {\n            ctx.translate(-scaleMin * refXProp.getPixels('x'), -scaleMin * refYProp.getPixels('y'));\n        }\n        if (clip) {\n            const scaledClipX = scaleMin * clipX;\n            const scaledClipY = scaleMin * clipY;\n            ctx.beginPath();\n            ctx.moveTo(scaledClipX, scaledClipY);\n            ctx.lineTo(width, scaledClipY);\n            ctx.lineTo(width, height);\n            ctx.lineTo(scaledClipX, height);\n            ctx.closePath();\n            ctx.clip();\n        }\n        if (!hasRefs) {\n            const isMeetMinY = meetOrSlice === 'meet' && scaleMin === scaleY;\n            const isSliceMaxY = meetOrSlice === 'slice' && scaleMax === scaleY;\n            const isMeetMinX = meetOrSlice === 'meet' && scaleMin === scaleX;\n            const isSliceMaxX = meetOrSlice === 'slice' && scaleMax === scaleX;\n            if (align.startsWith('xMid') && (isMeetMinY || isSliceMaxY)) {\n                ctx.translate(width / 2 - finalDesiredWidth / 2, 0);\n            }\n            if (align.endsWith('YMid') && (isMeetMinX || isSliceMaxX)) {\n                ctx.translate(0, height / 2 - finalDesiredHeight / 2);\n            }\n            if (align.startsWith('xMax') && (isMeetMinY || isSliceMaxY)) {\n                ctx.translate(width - finalDesiredWidth, 0);\n            }\n            if (align.endsWith('YMax') && (isMeetMinX || isSliceMaxX)) {\n                ctx.translate(0, height - finalDesiredHeight);\n            }\n        }\n        // scale\n        switch(true){\n            case align === 'none':\n                ctx.scale(scaleX, scaleY);\n                break;\n            case meetOrSlice === 'meet':\n                ctx.scale(scaleMin, scaleMin);\n                break;\n            case meetOrSlice === 'slice':\n                ctx.scale(scaleMax, scaleMax);\n                break;\n        }\n        // translate\n        ctx.translate(-minX, -minY);\n    }\n    start(element) {\n        let { enableRedraw =false , ignoreMouse =false , ignoreAnimation =false , ignoreDimensions =false , ignoreClear =false , forceRedraw , scaleWidth , scaleHeight , offsetX , offsetY  } = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n        const { mouse  } = this;\n        const frameDuration = 1000 / Screen.FRAMERATE;\n        this.isReadyLock = false;\n        this.frameDuration = frameDuration;\n        this.readyPromise = new Promise((resolve)=>{\n            this.resolveReady = resolve;\n        });\n        if (this.isReady()) {\n            this.render(element, ignoreDimensions, ignoreClear, scaleWidth, scaleHeight, offsetX, offsetY);\n        }\n        if (!enableRedraw) {\n            return;\n        }\n        let now = Date.now();\n        let then = now;\n        let delta = 0;\n        const tick = ()=>{\n            now = Date.now();\n            delta = now - then;\n            if (delta >= frameDuration) {\n                then = now - delta % frameDuration;\n                if (this.shouldUpdate(ignoreAnimation, forceRedraw)) {\n                    this.render(element, ignoreDimensions, ignoreClear, scaleWidth, scaleHeight, offsetX, offsetY);\n                    mouse.runEvents();\n                }\n            }\n            this.intervalId = raf__WEBPACK_IMPORTED_MODULE_0__(tick);\n        };\n        if (!ignoreMouse) {\n            mouse.start();\n        }\n        this.intervalId = raf__WEBPACK_IMPORTED_MODULE_0__(tick);\n    }\n    stop() {\n        if (this.intervalId) {\n            raf__WEBPACK_IMPORTED_MODULE_0__.cancel(this.intervalId);\n            this.intervalId = null;\n        }\n        this.mouse.stop();\n    }\n    shouldUpdate(ignoreAnimation, forceRedraw) {\n        // need update from animations?\n        if (!ignoreAnimation) {\n            const { frameDuration  } = this;\n            const shouldUpdate1 = this.animations.reduce((shouldUpdate, animation)=>animation.update(frameDuration) || shouldUpdate\n            , false);\n            if (shouldUpdate1) {\n                return true;\n            }\n        }\n        // need update from redraw?\n        if (typeof forceRedraw === 'function' && forceRedraw()) {\n            return true;\n        }\n        if (!this.isReadyLock && this.isReady()) {\n            return true;\n        }\n        // need update from mouse events?\n        if (this.mouse.hasEvents()) {\n            return true;\n        }\n        return false;\n    }\n    render(element, ignoreDimensions, ignoreClear, scaleWidth, scaleHeight, offsetX, offsetY) {\n        const { viewPort , ctx , isFirstRender  } = this;\n        const canvas = ctx.canvas;\n        viewPort.clear();\n        if (canvas.width && canvas.height) {\n            viewPort.setCurrent(canvas.width, canvas.height);\n        }\n        const widthStyle = element.getStyle('width');\n        const heightStyle = element.getStyle('height');\n        if (!ignoreDimensions && (isFirstRender || typeof scaleWidth !== 'number' && typeof scaleHeight !== 'number')) {\n            // set canvas size\n            if (widthStyle.hasValue()) {\n                canvas.width = widthStyle.getPixels('x');\n                // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n                if (canvas.style) {\n                    canvas.style.width = \"\".concat(canvas.width, \"px\");\n                }\n            }\n            if (heightStyle.hasValue()) {\n                canvas.height = heightStyle.getPixels('y');\n                // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n                if (canvas.style) {\n                    canvas.style.height = \"\".concat(canvas.height, \"px\");\n                }\n            }\n        }\n        let cWidth = canvas.clientWidth || canvas.width;\n        let cHeight = canvas.clientHeight || canvas.height;\n        if (ignoreDimensions && widthStyle.hasValue() && heightStyle.hasValue()) {\n            cWidth = widthStyle.getPixels('x');\n            cHeight = heightStyle.getPixels('y');\n        }\n        viewPort.setCurrent(cWidth, cHeight);\n        if (typeof offsetX === 'number') {\n            element.getAttribute('x', true).setValue(offsetX);\n        }\n        if (typeof offsetY === 'number') {\n            element.getAttribute('y', true).setValue(offsetY);\n        }\n        if (typeof scaleWidth === 'number' || typeof scaleHeight === 'number') {\n            const viewBox = toNumbers(element.getAttribute('viewBox').getString());\n            let xRatio = 0;\n            let yRatio = 0;\n            if (typeof scaleWidth === 'number') {\n                const widthStyle = element.getStyle('width');\n                if (widthStyle.hasValue()) {\n                    xRatio = widthStyle.getPixels('x') / scaleWidth;\n                } else if (viewBox[2] && !isNaN(viewBox[2])) {\n                    xRatio = viewBox[2] / scaleWidth;\n                }\n            }\n            if (typeof scaleHeight === 'number') {\n                const heightStyle = element.getStyle('height');\n                if (heightStyle.hasValue()) {\n                    yRatio = heightStyle.getPixels('y') / scaleHeight;\n                } else if (viewBox[3] && !isNaN(viewBox[3])) {\n                    yRatio = viewBox[3] / scaleHeight;\n                }\n            }\n            if (!xRatio) {\n                xRatio = yRatio;\n            }\n            if (!yRatio) {\n                yRatio = xRatio;\n            }\n            element.getAttribute('width', true).setValue(scaleWidth);\n            element.getAttribute('height', true).setValue(scaleHeight);\n            const transformStyle = element.getStyle('transform', true, true);\n            transformStyle.setValue(\"\".concat(transformStyle.getString(), \" scale(\").concat(1 / xRatio, \", \").concat(1 / yRatio, \")\"));\n        }\n        // clear and render\n        if (!ignoreClear) {\n            ctx.clearRect(0, 0, cWidth, cHeight);\n        }\n        element.render(ctx);\n        if (isFirstRender) {\n            this.isFirstRender = false;\n        }\n    }\n    constructor(ctx, { fetch =defaultFetch$1 , window =defaultWindow  } = {}){\n        this.ctx = ctx;\n        this.viewPort = new ViewPort();\n        this.mouse = new Mouse(this);\n        this.animations = [];\n        this.waits = [];\n        this.frameDuration = 0;\n        this.isReadyLock = false;\n        this.isFirstRender = true;\n        this.intervalId = null;\n        this.window = window;\n        if (!fetch) {\n            throw new Error(\"Can't find 'fetch' in 'globalThis', please provide it via options\");\n        }\n        this.fetch = fetch;\n    }\n}\nScreen.defaultWindow = defaultWindow;\nScreen.defaultFetch = defaultFetch$1;\nScreen.FRAMERATE = 30;\nScreen.MAX_VIRTUAL_PIXELS = 30000;\n\nconst { defaultFetch  } = Screen;\nconst DefaultDOMParser = typeof DOMParser !== 'undefined' ? DOMParser : undefined;\nclass Parser {\n    async parse(resource) {\n        if (resource.startsWith('<')) {\n            return this.parseFromString(resource);\n        }\n        return this.load(resource);\n    }\n    parseFromString(xml) {\n        const parser = new this.DOMParser();\n        try {\n            return this.checkDocument(parser.parseFromString(xml, 'image/svg+xml'));\n        } catch (err) {\n            return this.checkDocument(parser.parseFromString(xml, 'text/xml'));\n        }\n    }\n    checkDocument(document) {\n        const parserError = document.getElementsByTagName('parsererror')[0];\n        if (parserError) {\n            throw new Error(parserError.textContent || 'Unknown parse error');\n        }\n        return document;\n    }\n    async load(url) {\n        const response = await this.fetch(url);\n        const xml = await response.text();\n        return this.parseFromString(xml);\n    }\n    constructor({ fetch =defaultFetch , DOMParser =DefaultDOMParser  } = {}){\n        if (!fetch) {\n            throw new Error(\"Can't find 'fetch' in 'globalThis', please provide it via options\");\n        }\n        if (!DOMParser) {\n            throw new Error(\"Can't find 'DOMParser' in 'globalThis', please provide it via options\");\n        }\n        this.fetch = fetch;\n        this.DOMParser = DOMParser;\n    }\n}\n\nclass Translate {\n    apply(ctx) {\n        const { x , y  } = this.point;\n        ctx.translate(x || 0, y || 0);\n    }\n    unapply(ctx) {\n        const { x , y  } = this.point;\n        ctx.translate(-1 * x || 0, -1 * y || 0);\n    }\n    applyToPoint(point) {\n        const { x , y  } = this.point;\n        point.applyTransform([\n            1,\n            0,\n            0,\n            1,\n            x || 0,\n            y || 0\n        ]);\n    }\n    constructor(_, point){\n        this.type = 'translate';\n        this.point = Point.parse(point);\n    }\n}\n\nclass Rotate {\n    apply(ctx) {\n        const { cx , cy , originX , originY , angle  } = this;\n        const tx = cx + originX.getPixels('x');\n        const ty = cy + originY.getPixels('y');\n        ctx.translate(tx, ty);\n        ctx.rotate(angle.getRadians());\n        ctx.translate(-tx, -ty);\n    }\n    unapply(ctx) {\n        const { cx , cy , originX , originY , angle  } = this;\n        const tx = cx + originX.getPixels('x');\n        const ty = cy + originY.getPixels('y');\n        ctx.translate(tx, ty);\n        ctx.rotate(-1 * angle.getRadians());\n        ctx.translate(-tx, -ty);\n    }\n    applyToPoint(point) {\n        const { cx , cy , angle  } = this;\n        const rad = angle.getRadians();\n        point.applyTransform([\n            1,\n            0,\n            0,\n            1,\n            cx || 0,\n            cy || 0 // this.p.y\n        ]);\n        point.applyTransform([\n            Math.cos(rad),\n            Math.sin(rad),\n            -Math.sin(rad),\n            Math.cos(rad),\n            0,\n            0\n        ]);\n        point.applyTransform([\n            1,\n            0,\n            0,\n            1,\n            -cx || 0,\n            -cy || 0 // -this.p.y\n        ]);\n    }\n    constructor(document, rotate, transformOrigin){\n        this.type = 'rotate';\n        const numbers = toNumbers(rotate);\n        this.angle = new Property(document, 'angle', numbers[0]);\n        this.originX = transformOrigin[0];\n        this.originY = transformOrigin[1];\n        this.cx = numbers[1] || 0;\n        this.cy = numbers[2] || 0;\n    }\n}\n\nclass Scale {\n    apply(ctx) {\n        const { scale: { x , y  } , originX , originY  } = this;\n        const tx = originX.getPixels('x');\n        const ty = originY.getPixels('y');\n        ctx.translate(tx, ty);\n        ctx.scale(x, y || x);\n        ctx.translate(-tx, -ty);\n    }\n    unapply(ctx) {\n        const { scale: { x , y  } , originX , originY  } = this;\n        const tx = originX.getPixels('x');\n        const ty = originY.getPixels('y');\n        ctx.translate(tx, ty);\n        ctx.scale(1 / x, 1 / y || x);\n        ctx.translate(-tx, -ty);\n    }\n    applyToPoint(point) {\n        const { x , y  } = this.scale;\n        point.applyTransform([\n            x || 0,\n            0,\n            0,\n            y || 0,\n            0,\n            0\n        ]);\n    }\n    constructor(_, scale, transformOrigin){\n        this.type = 'scale';\n        const scaleSize = Point.parseScale(scale);\n        // Workaround for node-canvas\n        if (scaleSize.x === 0 || scaleSize.y === 0) {\n            scaleSize.x = PSEUDO_ZERO;\n            scaleSize.y = PSEUDO_ZERO;\n        }\n        this.scale = scaleSize;\n        this.originX = transformOrigin[0];\n        this.originY = transformOrigin[1];\n    }\n}\n\nclass Matrix {\n    apply(ctx) {\n        const { originX , originY , matrix  } = this;\n        const tx = originX.getPixels('x');\n        const ty = originY.getPixels('y');\n        ctx.translate(tx, ty);\n        ctx.transform(matrix[0], matrix[1], matrix[2], matrix[3], matrix[4], matrix[5]);\n        ctx.translate(-tx, -ty);\n    }\n    unapply(ctx) {\n        const { originX , originY , matrix  } = this;\n        const a = matrix[0];\n        const b = matrix[2];\n        const c = matrix[4];\n        const d = matrix[1];\n        const e = matrix[3];\n        const f = matrix[5];\n        const g = 0;\n        const h = 0;\n        const i = 1;\n        const det = 1 / (a * (e * i - f * h) - b * (d * i - f * g) + c * (d * h - e * g));\n        const tx = originX.getPixels('x');\n        const ty = originY.getPixels('y');\n        ctx.translate(tx, ty);\n        ctx.transform(det * (e * i - f * h), det * (f * g - d * i), det * (c * h - b * i), det * (a * i - c * g), det * (b * f - c * e), det * (c * d - a * f));\n        ctx.translate(-tx, -ty);\n    }\n    applyToPoint(point) {\n        point.applyTransform(this.matrix);\n    }\n    constructor(_, matrix, transformOrigin){\n        this.type = 'matrix';\n        this.matrix = toMatrixValue(matrix);\n        this.originX = transformOrigin[0];\n        this.originY = transformOrigin[1];\n    }\n}\n\nclass Skew extends Matrix {\n    constructor(document, skew, transformOrigin){\n        super(document, skew, transformOrigin);\n        this.type = 'skew';\n        this.angle = new Property(document, 'angle', skew);\n    }\n}\n\nclass SkewX extends Skew {\n    constructor(document, skew, transformOrigin){\n        super(document, skew, transformOrigin);\n        this.type = 'skewX';\n        this.matrix = [\n            1,\n            0,\n            Math.tan(this.angle.getRadians()),\n            1,\n            0,\n            0\n        ];\n    }\n}\n\nclass SkewY extends Skew {\n    constructor(document, skew, transformOrigin){\n        super(document, skew, transformOrigin);\n        this.type = 'skewY';\n        this.matrix = [\n            1,\n            Math.tan(this.angle.getRadians()),\n            0,\n            1,\n            0,\n            0\n        ];\n    }\n}\n\nfunction parseTransforms(transform) {\n    return compressSpaces(transform).trim().replace(/\\)([a-zA-Z])/g, ') $1').replace(/\\)(\\s?,\\s?)/g, ') ').split(/\\s(?=[a-z])/);\n}\nfunction parseTransform(transform) {\n    const [type = '', value = ''] = transform.split('(');\n    return [\n        type.trim(),\n        value.trim().replace(')', '')\n    ];\n}\nclass Transform {\n    static fromElement(document, element) {\n        const transformStyle = element.getStyle('transform', false, true);\n        if (transformStyle.hasValue()) {\n            const [transformOriginXProperty, transformOriginYProperty = transformOriginXProperty] = element.getStyle('transform-origin', false, true).split();\n            if (transformOriginXProperty && transformOriginYProperty) {\n                const transformOrigin = [\n                    transformOriginXProperty,\n                    transformOriginYProperty\n                ];\n                return new Transform(document, transformStyle.getString(), transformOrigin);\n            }\n        }\n        return null;\n    }\n    apply(ctx) {\n        this.transforms.forEach((transform)=>transform.apply(ctx)\n        );\n    }\n    unapply(ctx) {\n        this.transforms.forEach((transform)=>transform.unapply(ctx)\n        );\n    }\n    // TODO: applyToPoint unused ... remove?\n    applyToPoint(point) {\n        this.transforms.forEach((transform)=>transform.applyToPoint(point)\n        );\n    }\n    constructor(document, transform1, transformOrigin){\n        this.document = document;\n        this.transforms = [];\n        const data = parseTransforms(transform1);\n        data.forEach((transform)=>{\n            if (transform === 'none') {\n                return;\n            }\n            const [type, value] = parseTransform(transform);\n            const TransformType = Transform.transformTypes[type];\n            if (TransformType) {\n                this.transforms.push(new TransformType(this.document, value, transformOrigin));\n            }\n        });\n    }\n}\nTransform.transformTypes = {\n    translate: Translate,\n    rotate: Rotate,\n    scale: Scale,\n    matrix: Matrix,\n    skewX: SkewX,\n    skewY: SkewY\n};\n\nclass Element {\n    getAttribute(name) {\n        let createIfNotExists = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;\n        const attr = this.attributes[name];\n        if (!attr && createIfNotExists) {\n            const attr = new Property(this.document, name, '');\n            this.attributes[name] = attr;\n            return attr;\n        }\n        return attr || Property.empty(this.document);\n    }\n    getHrefAttribute() {\n        let href;\n        for(const key in this.attributes){\n            if (key === 'href' || key.endsWith(':href')) {\n                href = this.attributes[key];\n                break;\n            }\n        }\n        return href || Property.empty(this.document);\n    }\n    getStyle(name) {\n        let createIfNotExists = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false, skipAncestors = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;\n        const style = this.styles[name];\n        if (style) {\n            return style;\n        }\n        const attr = this.getAttribute(name);\n        if (attr.hasValue()) {\n            this.styles[name] = attr // move up to me to cache\n            ;\n            return attr;\n        }\n        if (!skipAncestors) {\n            const { parent  } = this;\n            if (parent) {\n                const parentStyle = parent.getStyle(name);\n                if (parentStyle.hasValue()) {\n                    return parentStyle;\n                }\n            }\n        }\n        if (createIfNotExists) {\n            const style = new Property(this.document, name, '');\n            this.styles[name] = style;\n            return style;\n        }\n        return Property.empty(this.document);\n    }\n    render(ctx) {\n        // don't render display=none\n        // don't render visibility=hidden\n        if (this.getStyle('display').getString() === 'none' || this.getStyle('visibility').getString() === 'hidden') {\n            return;\n        }\n        ctx.save();\n        if (this.getStyle('mask').hasValue()) {\n            const mask = this.getStyle('mask').getDefinition();\n            if (mask) {\n                this.applyEffects(ctx);\n                mask.apply(ctx, this);\n            }\n        } else if (this.getStyle('filter').getValue('none') !== 'none') {\n            const filter = this.getStyle('filter').getDefinition();\n            if (filter) {\n                this.applyEffects(ctx);\n                filter.apply(ctx, this);\n            }\n        } else {\n            this.setContext(ctx);\n            this.renderChildren(ctx);\n            this.clearContext(ctx);\n        }\n        ctx.restore();\n    }\n    setContext(_) {\n    // NO RENDER\n    }\n    applyEffects(ctx) {\n        // transform\n        const transform = Transform.fromElement(this.document, this);\n        if (transform) {\n            transform.apply(ctx);\n        }\n        // clip\n        const clipPathStyleProp = this.getStyle('clip-path', false, true);\n        if (clipPathStyleProp.hasValue()) {\n            const clip = clipPathStyleProp.getDefinition();\n            if (clip) {\n                clip.apply(ctx);\n            }\n        }\n    }\n    clearContext(_) {\n    // NO RENDER\n    }\n    renderChildren(ctx) {\n        this.children.forEach((child)=>{\n            child.render(ctx);\n        });\n    }\n    addChild(childNode) {\n        const child = childNode instanceof Element ? childNode : this.document.createElement(childNode);\n        child.parent = this;\n        if (!Element.ignoreChildTypes.includes(child.type)) {\n            this.children.push(child);\n        }\n    }\n    matchesSelector(selector) {\n        var ref;\n        const { node  } = this;\n        if (typeof node.matches === 'function') {\n            return node.matches(selector);\n        }\n        const styleClasses = (ref = node.getAttribute) === null || ref === void 0 ? void 0 : ref.call(node, 'class');\n        if (!styleClasses || styleClasses === '') {\n            return false;\n        }\n        return styleClasses.split(' ').some((styleClass)=>\".\".concat(styleClass) === selector\n        );\n    }\n    addStylesFromStyleDefinition() {\n        const { styles , stylesSpecificity  } = this.document;\n        let styleProp;\n        for(const selector in styles){\n            if (!selector.startsWith('@') && this.matchesSelector(selector)) {\n                const style = styles[selector];\n                const specificity = stylesSpecificity[selector];\n                if (style) {\n                    for(const name in style){\n                        let existingSpecificity = this.stylesSpecificity[name];\n                        if (typeof existingSpecificity === 'undefined') {\n                            existingSpecificity = '000';\n                        }\n                        if (specificity && specificity >= existingSpecificity) {\n                            styleProp = style[name];\n                            if (styleProp) {\n                                this.styles[name] = styleProp;\n                            }\n                            this.stylesSpecificity[name] = specificity;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    removeStyles(element, ignoreStyles) {\n        const toRestore1 = ignoreStyles.reduce((toRestore, name)=>{\n            const styleProp = element.getStyle(name);\n            if (!styleProp.hasValue()) {\n                return toRestore;\n            }\n            const value = styleProp.getString();\n            styleProp.setValue('');\n            return [\n                ...toRestore,\n                [\n                    name,\n                    value\n                ]\n            ];\n        }, []);\n        return toRestore1;\n    }\n    restoreStyles(element, styles) {\n        styles.forEach((param)=>{\n            let [name, value] = param;\n            element.getStyle(name, true).setValue(value);\n        });\n    }\n    isFirstChild() {\n        var ref;\n        return ((ref = this.parent) === null || ref === void 0 ? void 0 : ref.children.indexOf(this)) === 0;\n    }\n    constructor(document, node, captureTextNodes = false){\n        this.document = document;\n        this.node = node;\n        this.captureTextNodes = captureTextNodes;\n        this.type = '';\n        this.attributes = {};\n        this.styles = {};\n        this.stylesSpecificity = {};\n        this.animationFrozen = false;\n        this.animationFrozenValue = '';\n        this.parent = null;\n        this.children = [];\n        if (!node || node.nodeType !== 1) {\n            return;\n        }\n        // add attributes\n        Array.from(node.attributes).forEach((attribute)=>{\n            const nodeName = normalizeAttributeName(attribute.nodeName);\n            this.attributes[nodeName] = new Property(document, nodeName, attribute.value);\n        });\n        this.addStylesFromStyleDefinition();\n        // add inline styles\n        if (this.getAttribute('style').hasValue()) {\n            const styles = this.getAttribute('style').getString().split(';').map((_)=>_.trim()\n            );\n            styles.forEach((style)=>{\n                if (!style) {\n                    return;\n                }\n                const [name, value] = style.split(':').map((_)=>_.trim()\n                );\n                if (name) {\n                    this.styles[name] = new Property(document, name, value);\n                }\n            });\n        }\n        const { definitions  } = document;\n        const id = this.getAttribute('id');\n        // add id\n        if (id.hasValue()) {\n            if (!definitions[id.getString()]) {\n                definitions[id.getString()] = this;\n            }\n        }\n        Array.from(node.childNodes).forEach((childNode)=>{\n            if (childNode.nodeType === 1) {\n                this.addChild(childNode) // ELEMENT_NODE\n                ;\n            } else if (captureTextNodes && (childNode.nodeType === 3 || childNode.nodeType === 4)) {\n                const textNode = document.createTextNode(childNode);\n                if (textNode.getText().length > 0) {\n                    this.addChild(textNode) // TEXT_NODE\n                    ;\n                }\n            }\n        });\n    }\n}\nElement.ignoreChildTypes = [\n    'title'\n];\n\nclass UnknownElement extends Element {\n    constructor(document, node, captureTextNodes){\n        super(document, node, captureTextNodes);\n    }\n}\n\nfunction wrapFontFamily(fontFamily) {\n    const trimmed = fontFamily.trim();\n    return /^('|\")/.test(trimmed) ? trimmed : \"\\\"\".concat(trimmed, \"\\\"\");\n}\nfunction prepareFontFamily(fontFamily) {\n    return typeof process === 'undefined' ? fontFamily : fontFamily.trim().split(',').map(wrapFontFamily).join(',');\n}\n/**\n * https://developer.mozilla.org/en-US/docs/Web/CSS/font-style\n * @param fontStyle\n * @returns CSS font style.\n */ function prepareFontStyle(fontStyle) {\n    if (!fontStyle) {\n        return '';\n    }\n    const targetFontStyle = fontStyle.trim().toLowerCase();\n    switch(targetFontStyle){\n        case 'normal':\n        case 'italic':\n        case 'oblique':\n        case 'inherit':\n        case 'initial':\n        case 'unset':\n            return targetFontStyle;\n        default:\n            if (/^oblique\\s+(-|)\\d+deg$/.test(targetFontStyle)) {\n                return targetFontStyle;\n            }\n            return '';\n    }\n}\n/**\n * https://developer.mozilla.org/en-US/docs/Web/CSS/font-weight\n * @param fontWeight\n * @returns CSS font weight.\n */ function prepareFontWeight(fontWeight) {\n    if (!fontWeight) {\n        return '';\n    }\n    const targetFontWeight = fontWeight.trim().toLowerCase();\n    switch(targetFontWeight){\n        case 'normal':\n        case 'bold':\n        case 'lighter':\n        case 'bolder':\n        case 'inherit':\n        case 'initial':\n        case 'unset':\n            return targetFontWeight;\n        default:\n            if (/^[\\d.]+$/.test(targetFontWeight)) {\n                return targetFontWeight;\n            }\n            return '';\n    }\n}\nclass Font {\n    static parse() {\n        let font = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : '', inherit = arguments.length > 1 ? arguments[1] : void 0;\n        let fontStyle = '';\n        let fontVariant = '';\n        let fontWeight = '';\n        let fontSize = '';\n        let fontFamily = '';\n        const parts = compressSpaces(font).trim().split(' ');\n        const set = {\n            fontSize: false,\n            fontStyle: false,\n            fontWeight: false,\n            fontVariant: false\n        };\n        parts.forEach((part)=>{\n            switch(true){\n                case !set.fontStyle && Font.styles.includes(part):\n                    if (part !== 'inherit') {\n                        fontStyle = part;\n                    }\n                    set.fontStyle = true;\n                    break;\n                case !set.fontVariant && Font.variants.includes(part):\n                    if (part !== 'inherit') {\n                        fontVariant = part;\n                    }\n                    set.fontStyle = true;\n                    set.fontVariant = true;\n                    break;\n                case !set.fontWeight && Font.weights.includes(part):\n                    if (part !== 'inherit') {\n                        fontWeight = part;\n                    }\n                    set.fontStyle = true;\n                    set.fontVariant = true;\n                    set.fontWeight = true;\n                    break;\n                case !set.fontSize:\n                    if (part !== 'inherit') {\n                        fontSize = part.split('/')[0] || '';\n                    }\n                    set.fontStyle = true;\n                    set.fontVariant = true;\n                    set.fontWeight = true;\n                    set.fontSize = true;\n                    break;\n                default:\n                    if (part !== 'inherit') {\n                        fontFamily += part;\n                    }\n            }\n        });\n        return new Font(fontStyle, fontVariant, fontWeight, fontSize, fontFamily, inherit);\n    }\n    toString() {\n        return [\n            prepareFontStyle(this.fontStyle),\n            this.fontVariant,\n            prepareFontWeight(this.fontWeight),\n            this.fontSize,\n            // Wrap fontFamily only on nodejs and only for canvas.ctx\n            prepareFontFamily(this.fontFamily)\n        ].join(' ').trim();\n    }\n    constructor(fontStyle, fontVariant, fontWeight, fontSize, fontFamily, inherit){\n        const inheritFont = inherit ? typeof inherit === 'string' ? Font.parse(inherit) : inherit : {};\n        this.fontFamily = fontFamily || inheritFont.fontFamily;\n        this.fontSize = fontSize || inheritFont.fontSize;\n        this.fontStyle = fontStyle || inheritFont.fontStyle;\n        this.fontWeight = fontWeight || inheritFont.fontWeight;\n        this.fontVariant = fontVariant || inheritFont.fontVariant;\n    }\n}\nFont.styles = 'normal|italic|oblique|inherit';\nFont.variants = 'normal|small-caps|inherit';\nFont.weights = 'normal|bold|bolder|lighter|100|200|300|400|500|600|700|800|900|inherit';\n\nclass BoundingBox {\n    get x() {\n        return this.x1;\n    }\n    get y() {\n        return this.y1;\n    }\n    get width() {\n        return this.x2 - this.x1;\n    }\n    get height() {\n        return this.y2 - this.y1;\n    }\n    addPoint(x, y) {\n        if (typeof x !== 'undefined') {\n            if (isNaN(this.x1) || isNaN(this.x2)) {\n                this.x1 = x;\n                this.x2 = x;\n            }\n            if (x < this.x1) {\n                this.x1 = x;\n            }\n            if (x > this.x2) {\n                this.x2 = x;\n            }\n        }\n        if (typeof y !== 'undefined') {\n            if (isNaN(this.y1) || isNaN(this.y2)) {\n                this.y1 = y;\n                this.y2 = y;\n            }\n            if (y < this.y1) {\n                this.y1 = y;\n            }\n            if (y > this.y2) {\n                this.y2 = y;\n            }\n        }\n    }\n    addX(x) {\n        this.addPoint(x, 0);\n    }\n    addY(y) {\n        this.addPoint(0, y);\n    }\n    addBoundingBox(boundingBox) {\n        if (!boundingBox) {\n            return;\n        }\n        const { x1 , y1 , x2 , y2  } = boundingBox;\n        this.addPoint(x1, y1);\n        this.addPoint(x2, y2);\n    }\n    sumCubic(t, p0, p1, p2, p3) {\n        return Math.pow(1 - t, 3) * p0 + 3 * Math.pow(1 - t, 2) * t * p1 + 3 * (1 - t) * Math.pow(t, 2) * p2 + Math.pow(t, 3) * p3;\n    }\n    bezierCurveAdd(forX, p0, p1, p2, p3) {\n        const b = 6 * p0 - 12 * p1 + 6 * p2;\n        const a = -3 * p0 + 9 * p1 - 9 * p2 + 3 * p3;\n        const c = 3 * p1 - 3 * p0;\n        if (a === 0) {\n            if (b === 0) {\n                return;\n            }\n            const t = -c / b;\n            if (0 < t && t < 1) {\n                if (forX) {\n                    this.addX(this.sumCubic(t, p0, p1, p2, p3));\n                } else {\n                    this.addY(this.sumCubic(t, p0, p1, p2, p3));\n                }\n            }\n            return;\n        }\n        const b2ac = Math.pow(b, 2) - 4 * c * a;\n        if (b2ac < 0) {\n            return;\n        }\n        const t1 = (-b + Math.sqrt(b2ac)) / (2 * a);\n        if (0 < t1 && t1 < 1) {\n            if (forX) {\n                this.addX(this.sumCubic(t1, p0, p1, p2, p3));\n            } else {\n                this.addY(this.sumCubic(t1, p0, p1, p2, p3));\n            }\n        }\n        const t2 = (-b - Math.sqrt(b2ac)) / (2 * a);\n        if (0 < t2 && t2 < 1) {\n            if (forX) {\n                this.addX(this.sumCubic(t2, p0, p1, p2, p3));\n            } else {\n                this.addY(this.sumCubic(t2, p0, p1, p2, p3));\n            }\n        }\n    }\n    // from http://blog.hackers-cafe.net/2009/06/how-to-calculate-bezier-curves-bounding.html\n    addBezierCurve(p0x, p0y, p1x, p1y, p2x, p2y, p3x, p3y) {\n        this.addPoint(p0x, p0y);\n        this.addPoint(p3x, p3y);\n        this.bezierCurveAdd(true, p0x, p1x, p2x, p3x);\n        this.bezierCurveAdd(false, p0y, p1y, p2y, p3y);\n    }\n    addQuadraticCurve(p0x, p0y, p1x, p1y, p2x, p2y) {\n        const cp1x = p0x + 2 / 3 * (p1x - p0x) // CP1 = QP0 + 2/3 *(QP1-QP0)\n        ;\n        const cp1y = p0y + 2 / 3 * (p1y - p0y) // CP1 = QP0 + 2/3 *(QP1-QP0)\n        ;\n        const cp2x = cp1x + 1 / 3 * (p2x - p0x) // CP2 = CP1 + 1/3 *(QP2-QP0)\n        ;\n        const cp2y = cp1y + 1 / 3 * (p2y - p0y) // CP2 = CP1 + 1/3 *(QP2-QP0)\n        ;\n        this.addBezierCurve(p0x, p0y, cp1x, cp2x, cp1y, cp2y, p2x, p2y);\n    }\n    isPointInBox(x, y) {\n        const { x1 , y1 , x2 , y2  } = this;\n        return x1 <= x && x <= x2 && y1 <= y && y <= y2;\n    }\n    constructor(x1 = Number.NaN, y1 = Number.NaN, x2 = Number.NaN, y2 = Number.NaN){\n        this.x1 = x1;\n        this.y1 = y1;\n        this.x2 = x2;\n        this.y2 = y2;\n        this.addPoint(x1, y1);\n        this.addPoint(x2, y2);\n    }\n}\n\nclass RenderedElement extends Element {\n    calculateOpacity() {\n        let opacity = 1;\n        // eslint-disable-next-line @typescript-eslint/no-this-alias, consistent-this\n        let element = this;\n        while(element){\n            const opacityStyle = element.getStyle('opacity', false, true) // no ancestors on style call\n            ;\n            if (opacityStyle.hasValue(true)) {\n                opacity *= opacityStyle.getNumber();\n            }\n            element = element.parent;\n        }\n        return opacity;\n    }\n    setContext(ctx) {\n        let fromMeasure = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;\n        if (!fromMeasure) {\n            // fill\n            const fillStyleProp = this.getStyle('fill');\n            const fillOpacityStyleProp = this.getStyle('fill-opacity');\n            const strokeStyleProp = this.getStyle('stroke');\n            const strokeOpacityProp = this.getStyle('stroke-opacity');\n            if (fillStyleProp.isUrlDefinition()) {\n                const fillStyle = fillStyleProp.getFillStyleDefinition(this, fillOpacityStyleProp);\n                if (fillStyle) {\n                    ctx.fillStyle = fillStyle;\n                }\n            } else if (fillStyleProp.hasValue()) {\n                if (fillStyleProp.getString() === 'currentColor') {\n                    fillStyleProp.setValue(this.getStyle('color').getColor());\n                }\n                const fillStyle = fillStyleProp.getColor();\n                if (fillStyle !== 'inherit') {\n                    ctx.fillStyle = fillStyle === 'none' ? 'rgba(0,0,0,0)' : fillStyle;\n                }\n            }\n            if (fillOpacityStyleProp.hasValue()) {\n                const fillStyle = new Property(this.document, 'fill', ctx.fillStyle).addOpacity(fillOpacityStyleProp).getColor();\n                ctx.fillStyle = fillStyle;\n            }\n            // stroke\n            if (strokeStyleProp.isUrlDefinition()) {\n                const strokeStyle = strokeStyleProp.getFillStyleDefinition(this, strokeOpacityProp);\n                if (strokeStyle) {\n                    ctx.strokeStyle = strokeStyle;\n                }\n            } else if (strokeStyleProp.hasValue()) {\n                if (strokeStyleProp.getString() === 'currentColor') {\n                    strokeStyleProp.setValue(this.getStyle('color').getColor());\n                }\n                const strokeStyle = strokeStyleProp.getString();\n                if (strokeStyle !== 'inherit') {\n                    ctx.strokeStyle = strokeStyle === 'none' ? 'rgba(0,0,0,0)' : strokeStyle;\n                }\n            }\n            if (strokeOpacityProp.hasValue()) {\n                const strokeStyle = new Property(this.document, 'stroke', ctx.strokeStyle).addOpacity(strokeOpacityProp).getString();\n                ctx.strokeStyle = strokeStyle;\n            }\n            const strokeWidthStyleProp = this.getStyle('stroke-width');\n            if (strokeWidthStyleProp.hasValue()) {\n                const newLineWidth = strokeWidthStyleProp.getPixels();\n                ctx.lineWidth = !newLineWidth ? PSEUDO_ZERO // browsers don't respect 0 (or node-canvas? :-)\n                 : newLineWidth;\n            }\n            const strokeLinecapStyleProp = this.getStyle('stroke-linecap');\n            const strokeLinejoinStyleProp = this.getStyle('stroke-linejoin');\n            const strokeMiterlimitProp = this.getStyle('stroke-miterlimit');\n            // NEED TEST\n            // const pointOrderStyleProp = this.getStyle('paint-order');\n            const strokeDasharrayStyleProp = this.getStyle('stroke-dasharray');\n            const strokeDashoffsetProp = this.getStyle('stroke-dashoffset');\n            if (strokeLinecapStyleProp.hasValue()) {\n                ctx.lineCap = strokeLinecapStyleProp.getString();\n            }\n            if (strokeLinejoinStyleProp.hasValue()) {\n                ctx.lineJoin = strokeLinejoinStyleProp.getString();\n            }\n            if (strokeMiterlimitProp.hasValue()) {\n                ctx.miterLimit = strokeMiterlimitProp.getNumber();\n            }\n            // NEED TEST\n            // if (pointOrderStyleProp.hasValue()) {\n            //   // ?\n            //   ctx.paintOrder = pointOrderStyleProp.getValue();\n            // }\n            if (strokeDasharrayStyleProp.hasValue() && strokeDasharrayStyleProp.getString() !== 'none') {\n                const gaps = toNumbers(strokeDasharrayStyleProp.getString());\n                if (typeof ctx.setLineDash !== 'undefined') {\n                    ctx.setLineDash(gaps);\n                } else // @ts-expect-error Handle browser prefix.\n                if (typeof ctx.webkitLineDash !== 'undefined') {\n                    // @ts-expect-error Handle browser prefix.\n                    ctx.webkitLineDash = gaps;\n                } else // @ts-expect-error Handle browser prefix.\n                if (typeof ctx.mozDash !== 'undefined' && !(gaps.length === 1 && gaps[0] === 0)) {\n                    // @ts-expect-error Handle browser prefix.\n                    ctx.mozDash = gaps;\n                }\n                const offset = strokeDashoffsetProp.getPixels();\n                if (typeof ctx.lineDashOffset !== 'undefined') {\n                    ctx.lineDashOffset = offset;\n                } else // @ts-expect-error Handle browser prefix.\n                if (typeof ctx.webkitLineDashOffset !== 'undefined') {\n                    // @ts-expect-error Handle browser prefix.\n                    ctx.webkitLineDashOffset = offset;\n                } else // @ts-expect-error Handle browser prefix.\n                if (typeof ctx.mozDashOffset !== 'undefined') {\n                    // @ts-expect-error Handle browser prefix.\n                    ctx.mozDashOffset = offset;\n                }\n            }\n        }\n        // font\n        this.modifiedEmSizeStack = false;\n        if (typeof ctx.font !== 'undefined') {\n            const fontStyleProp = this.getStyle('font');\n            const fontStyleStyleProp = this.getStyle('font-style');\n            const fontVariantStyleProp = this.getStyle('font-variant');\n            const fontWeightStyleProp = this.getStyle('font-weight');\n            const fontSizeStyleProp = this.getStyle('font-size');\n            const fontFamilyStyleProp = this.getStyle('font-family');\n            const font = new Font(fontStyleStyleProp.getString(), fontVariantStyleProp.getString(), fontWeightStyleProp.getString(), fontSizeStyleProp.hasValue() ? \"\".concat(fontSizeStyleProp.getPixels(true), \"px\") : '', fontFamilyStyleProp.getString(), Font.parse(fontStyleProp.getString(), ctx.font));\n            fontStyleStyleProp.setValue(font.fontStyle);\n            fontVariantStyleProp.setValue(font.fontVariant);\n            fontWeightStyleProp.setValue(font.fontWeight);\n            fontSizeStyleProp.setValue(font.fontSize);\n            fontFamilyStyleProp.setValue(font.fontFamily);\n            ctx.font = font.toString();\n            if (fontSizeStyleProp.isPixels()) {\n                this.document.emSize = fontSizeStyleProp.getPixels();\n                this.modifiedEmSizeStack = true;\n            }\n        }\n        if (!fromMeasure) {\n            // effects\n            this.applyEffects(ctx);\n            // opacity\n            ctx.globalAlpha = this.calculateOpacity();\n        }\n    }\n    clearContext(ctx) {\n        super.clearContext(ctx);\n        if (this.modifiedEmSizeStack) {\n            this.document.popEmSize();\n        }\n    }\n    constructor(...args){\n        super(...args);\n        this.modifiedEmSizeStack = false;\n    }\n}\n\nclass TextElement extends RenderedElement {\n    setContext(ctx) {\n        let fromMeasure = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;\n        super.setContext(ctx, fromMeasure);\n        const textBaseline = this.getStyle('dominant-baseline').getTextBaseline() || this.getStyle('alignment-baseline').getTextBaseline();\n        if (textBaseline) {\n            ctx.textBaseline = textBaseline;\n        }\n    }\n    initializeCoordinates() {\n        this.x = 0;\n        this.y = 0;\n        this.leafTexts = [];\n        this.textChunkStart = 0;\n        this.minX = Number.POSITIVE_INFINITY;\n        this.maxX = Number.NEGATIVE_INFINITY;\n    }\n    getBoundingBox(ctx) {\n        if (this.type !== 'text') {\n            return this.getTElementBoundingBox(ctx);\n        }\n        // first, calculate child positions\n        this.initializeCoordinates();\n        this.adjustChildCoordinatesRecursive(ctx);\n        let boundingBox = null;\n        // then calculate bounding box\n        this.children.forEach((_, i)=>{\n            const childBoundingBox = this.getChildBoundingBox(ctx, this, this, i);\n            if (!boundingBox) {\n                boundingBox = childBoundingBox;\n            } else {\n                boundingBox.addBoundingBox(childBoundingBox);\n            }\n        });\n        return boundingBox;\n    }\n    getFontSize() {\n        const { document , parent  } = this;\n        const inheritFontSize = Font.parse(document.ctx.font).fontSize;\n        const fontSize = parent.getStyle('font-size').getNumber(inheritFontSize);\n        return fontSize;\n    }\n    getTElementBoundingBox(ctx) {\n        const fontSize = this.getFontSize();\n        return new BoundingBox(this.x, this.y - fontSize, this.x + this.measureText(ctx), this.y);\n    }\n    getGlyph(font, text, i) {\n        const char = text[i];\n        let glyph;\n        if (font.isArabic) {\n            var ref;\n            const len = text.length;\n            const prevChar = text[i - 1];\n            const nextChar = text[i + 1];\n            let arabicForm = 'isolated';\n            if ((i === 0 || prevChar === ' ') && i < len - 1 && nextChar !== ' ') {\n                arabicForm = 'terminal';\n            }\n            if (i > 0 && prevChar !== ' ' && i < len - 1 && nextChar !== ' ') {\n                arabicForm = 'medial';\n            }\n            if (i > 0 && prevChar !== ' ' && (i === len - 1 || nextChar === ' ')) {\n                arabicForm = 'initial';\n            }\n            glyph = ((ref = font.arabicGlyphs[char]) === null || ref === void 0 ? void 0 : ref[arabicForm]) || font.glyphs[char];\n        } else {\n            glyph = font.glyphs[char];\n        }\n        if (!glyph) {\n            glyph = font.missingGlyph;\n        }\n        return glyph;\n    }\n    getText() {\n        return '';\n    }\n    getTextFromNode(node) {\n        const textNode = node || this.node;\n        const childNodes = Array.from(textNode.parentNode.childNodes);\n        const index = childNodes.indexOf(textNode);\n        const lastIndex = childNodes.length - 1;\n        let text = compressSpaces(// textNode.value\n        // || textNode.text\n        textNode.textContent || '');\n        if (index === 0) {\n            text = trimLeft(text);\n        }\n        if (index === lastIndex) {\n            text = trimRight(text);\n        }\n        return text;\n    }\n    renderChildren(ctx) {\n        if (this.type !== 'text') {\n            this.renderTElementChildren(ctx);\n            return;\n        }\n        // first, calculate child positions\n        this.initializeCoordinates();\n        this.adjustChildCoordinatesRecursive(ctx);\n        // then render\n        this.children.forEach((_, i)=>{\n            this.renderChild(ctx, this, this, i);\n        });\n        const { mouse  } = this.document.screen;\n        // Do not calc bounding box if mouse is not working.\n        if (mouse.isWorking()) {\n            mouse.checkBoundingBox(this, this.getBoundingBox(ctx));\n        }\n    }\n    renderTElementChildren(ctx) {\n        const { document , parent  } = this;\n        const renderText = this.getText();\n        const customFont = parent.getStyle('font-family').getDefinition();\n        if (customFont) {\n            const { unitsPerEm  } = customFont.fontFace;\n            const ctxFont = Font.parse(document.ctx.font);\n            const fontSize = parent.getStyle('font-size').getNumber(ctxFont.fontSize);\n            const fontStyle = parent.getStyle('font-style').getString(ctxFont.fontStyle);\n            const scale = fontSize / unitsPerEm;\n            const text = customFont.isRTL ? renderText.split('').reverse().join('') : renderText;\n            const dx = toNumbers(parent.getAttribute('dx').getString());\n            const len = text.length;\n            for(let i = 0; i < len; i++){\n                const glyph = this.getGlyph(customFont, text, i);\n                ctx.translate(this.x, this.y);\n                ctx.scale(scale, -scale);\n                const lw = ctx.lineWidth;\n                ctx.lineWidth = ctx.lineWidth * unitsPerEm / fontSize;\n                if (fontStyle === 'italic') {\n                    ctx.transform(1, 0, 0.4, 1, 0, 0);\n                }\n                glyph.render(ctx);\n                if (fontStyle === 'italic') {\n                    ctx.transform(1, 0, -0.4, 1, 0, 0);\n                }\n                ctx.lineWidth = lw;\n                ctx.scale(1 / scale, -1 / scale);\n                ctx.translate(-this.x, -this.y);\n                this.x += fontSize * (glyph.horizAdvX || customFont.horizAdvX) / unitsPerEm;\n                if (typeof dx[i] !== 'undefined' && !isNaN(dx[i])) {\n                    this.x += dx[i];\n                }\n            }\n            return;\n        }\n        const { x , y  } = this;\n        // NEED TEST\n        // if (ctx.paintOrder === 'stroke') {\n        //   if (ctx.strokeStyle) {\n        //     ctx.strokeText(renderText, x, y);\n        //   }\n        //   if (ctx.fillStyle) {\n        //     ctx.fillText(renderText, x, y);\n        //   }\n        // } else {\n        if (ctx.fillStyle) {\n            ctx.fillText(renderText, x, y);\n        }\n        if (ctx.strokeStyle) {\n            ctx.strokeText(renderText, x, y);\n        }\n    // }\n    }\n    applyAnchoring() {\n        if (this.textChunkStart >= this.leafTexts.length) {\n            return;\n        }\n        // This is basically the \"Apply anchoring\" part of https://www.w3.org/TR/SVG2/text.html#TextLayoutAlgorithm.\n        // The difference is that we apply the anchoring as soon as a chunk is finished. This saves some extra looping.\n        // Vertical text is not supported.\n        const firstElement = this.leafTexts[this.textChunkStart];\n        const textAnchor = firstElement.getStyle('text-anchor').getString('start');\n        const isRTL = false // we treat RTL like LTR\n        ;\n        let shift = 0;\n        if (textAnchor === 'start' && !isRTL || textAnchor === 'end' && isRTL) {\n            shift = firstElement.x - this.minX;\n        } else if (textAnchor === 'end' && !isRTL || textAnchor === 'start' && isRTL) {\n            shift = firstElement.x - this.maxX;\n        } else {\n            shift = firstElement.x - (this.minX + this.maxX) / 2;\n        }\n        for(let i = this.textChunkStart; i < this.leafTexts.length; i++){\n            this.leafTexts[i].x += shift;\n        }\n        // start new chunk\n        this.minX = Number.POSITIVE_INFINITY;\n        this.maxX = Number.NEGATIVE_INFINITY;\n        this.textChunkStart = this.leafTexts.length;\n    }\n    adjustChildCoordinatesRecursive(ctx) {\n        this.children.forEach((_, i)=>{\n            this.adjustChildCoordinatesRecursiveCore(ctx, this, this, i);\n        });\n        this.applyAnchoring();\n    }\n    adjustChildCoordinatesRecursiveCore(ctx, textParent, parent, i1) {\n        const child = parent.children[i1];\n        if (child.children.length > 0) {\n            child.children.forEach((_, i)=>{\n                textParent.adjustChildCoordinatesRecursiveCore(ctx, textParent, child, i);\n            });\n        } else {\n            // only leafs are relevant\n            this.adjustChildCoordinates(ctx, textParent, parent, i1);\n        }\n    }\n    adjustChildCoordinates(ctx, textParent, parent, i) {\n        const child = parent.children[i];\n        if (typeof child.measureText !== 'function') {\n            return child;\n        }\n        ctx.save();\n        child.setContext(ctx, true);\n        const xAttr = child.getAttribute('x');\n        const yAttr = child.getAttribute('y');\n        const dxAttr = child.getAttribute('dx');\n        const dyAttr = child.getAttribute('dy');\n        const customFont = child.getStyle('font-family').getDefinition();\n        const isRTL = Boolean(customFont === null || customFont === void 0 ? void 0 : customFont.isRTL);\n        if (i === 0) {\n            // First children inherit attributes from parent(s). Positional attributes\n            // are only inherited from a parent to it's first child.\n            if (!xAttr.hasValue()) {\n                xAttr.setValue(child.getInheritedAttribute('x'));\n            }\n            if (!yAttr.hasValue()) {\n                yAttr.setValue(child.getInheritedAttribute('y'));\n            }\n            if (!dxAttr.hasValue()) {\n                dxAttr.setValue(child.getInheritedAttribute('dx'));\n            }\n            if (!dyAttr.hasValue()) {\n                dyAttr.setValue(child.getInheritedAttribute('dy'));\n            }\n        }\n        const width = child.measureText(ctx);\n        if (isRTL) {\n            textParent.x -= width;\n        }\n        if (xAttr.hasValue()) {\n            // an \"x\" attribute marks the start of a new chunk\n            textParent.applyAnchoring();\n            child.x = xAttr.getPixels('x');\n            if (dxAttr.hasValue()) {\n                child.x += dxAttr.getPixels('x');\n            }\n        } else {\n            if (dxAttr.hasValue()) {\n                textParent.x += dxAttr.getPixels('x');\n            }\n            child.x = textParent.x;\n        }\n        textParent.x = child.x;\n        if (!isRTL) {\n            textParent.x += width;\n        }\n        if (yAttr.hasValue()) {\n            child.y = yAttr.getPixels('y');\n            if (dyAttr.hasValue()) {\n                child.y += dyAttr.getPixels('y');\n            }\n        } else {\n            if (dyAttr.hasValue()) {\n                textParent.y += dyAttr.getPixels('y');\n            }\n            child.y = textParent.y;\n        }\n        textParent.y = child.y;\n        // update the current chunk and it's bounds\n        textParent.leafTexts.push(child);\n        textParent.minX = Math.min(textParent.minX, child.x, child.x + width);\n        textParent.maxX = Math.max(textParent.maxX, child.x, child.x + width);\n        child.clearContext(ctx);\n        ctx.restore();\n        return child;\n    }\n    getChildBoundingBox(ctx, textParent, parent, i2) {\n        const child = parent.children[i2];\n        // not a text node?\n        if (typeof child.getBoundingBox !== 'function') {\n            return null;\n        }\n        const boundingBox = child.getBoundingBox(ctx);\n        if (boundingBox) {\n            child.children.forEach((_, i)=>{\n                const childBoundingBox = textParent.getChildBoundingBox(ctx, textParent, child, i);\n                boundingBox.addBoundingBox(childBoundingBox);\n            });\n        }\n        return boundingBox;\n    }\n    renderChild(ctx, textParent, parent, i3) {\n        const child = parent.children[i3];\n        child.render(ctx);\n        child.children.forEach((_, i)=>{\n            textParent.renderChild(ctx, textParent, child, i);\n        });\n    }\n    measureText(ctx) {\n        const { measureCache  } = this;\n        if (~measureCache) {\n            return measureCache;\n        }\n        const renderText = this.getText();\n        const measure = this.measureTargetText(ctx, renderText);\n        this.measureCache = measure;\n        return measure;\n    }\n    measureTargetText(ctx, targetText) {\n        if (!targetText.length) {\n            return 0;\n        }\n        const { parent  } = this;\n        const customFont = parent.getStyle('font-family').getDefinition();\n        if (customFont) {\n            const fontSize = this.getFontSize();\n            const text = customFont.isRTL ? targetText.split('').reverse().join('') : targetText;\n            const dx = toNumbers(parent.getAttribute('dx').getString());\n            const len = text.length;\n            let measure = 0;\n            for(let i = 0; i < len; i++){\n                const glyph = this.getGlyph(customFont, text, i);\n                measure += (glyph.horizAdvX || customFont.horizAdvX) * fontSize / customFont.fontFace.unitsPerEm;\n                if (typeof dx[i] !== 'undefined' && !isNaN(dx[i])) {\n                    measure += dx[i];\n                }\n            }\n            return measure;\n        }\n        // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n        if (!ctx.measureText) {\n            return targetText.length * 10;\n        }\n        ctx.save();\n        this.setContext(ctx, true);\n        const { width: measure  } = ctx.measureText(targetText);\n        this.clearContext(ctx);\n        ctx.restore();\n        return measure;\n    }\n    /**\n   * Inherits positional attributes from {@link TextElement} parent(s). Attributes\n   * are only inherited from a parent to its first child.\n   * @param name - The attribute name.\n   * @returns The attribute value or null.\n   */ getInheritedAttribute(name) {\n        // eslint-disable-next-line @typescript-eslint/no-this-alias,consistent-this\n        let current = this;\n        while(current instanceof TextElement && current.isFirstChild() && current.parent){\n            const parentAttr = current.parent.getAttribute(name);\n            if (parentAttr.hasValue(true)) {\n                return parentAttr.getString('0');\n            }\n            current = current.parent;\n        }\n        return null;\n    }\n    constructor(document, node, captureTextNodes){\n        super(document, node, new.target === TextElement ? true : captureTextNodes);\n        this.type = 'text';\n        this.x = 0;\n        this.y = 0;\n        this.leafTexts = [];\n        this.textChunkStart = 0;\n        this.minX = Number.POSITIVE_INFINITY;\n        this.maxX = Number.NEGATIVE_INFINITY;\n        this.measureCache = -1;\n    }\n}\n\nclass TSpanElement extends TextElement {\n    getText() {\n        return this.text;\n    }\n    constructor(document, node, captureTextNodes){\n        super(document, node, new.target === TSpanElement ? true : captureTextNodes);\n        this.type = 'tspan';\n        // if this node has children, then they own the text\n        this.text = this.children.length > 0 ? '' : this.getTextFromNode();\n    }\n}\n\nclass TextNode extends TSpanElement {\n    constructor(...args){\n        super(...args);\n        this.type = 'textNode';\n    }\n}\n\nclass PathParser extends svg_pathdata__WEBPACK_IMPORTED_MODULE_2__.SVGPathData {\n    reset() {\n        this.i = -1;\n        this.command = null;\n        this.previousCommand = null;\n        this.start = new Point(0, 0);\n        this.control = new Point(0, 0);\n        this.current = new Point(0, 0);\n        this.points = [];\n        this.angles = [];\n    }\n    isEnd() {\n        const { i , commands  } = this;\n        return i >= commands.length - 1;\n    }\n    next() {\n        const command = this.commands[++this.i];\n        this.previousCommand = this.command;\n        this.command = command;\n        return command;\n    }\n    getPoint() {\n        let xProp = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 'x', yProp = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 'y';\n        const point = new Point(this.command[xProp], this.command[yProp]);\n        return this.makeAbsolute(point);\n    }\n    getAsControlPoint(xProp, yProp) {\n        const point = this.getPoint(xProp, yProp);\n        this.control = point;\n        return point;\n    }\n    getAsCurrentPoint(xProp, yProp) {\n        const point = this.getPoint(xProp, yProp);\n        this.current = point;\n        return point;\n    }\n    getReflectedControlPoint() {\n        const previousCommand = this.previousCommand.type;\n        if (previousCommand !== svg_pathdata__WEBPACK_IMPORTED_MODULE_2__.SVGPathData.CURVE_TO && previousCommand !== svg_pathdata__WEBPACK_IMPORTED_MODULE_2__.SVGPathData.SMOOTH_CURVE_TO && previousCommand !== svg_pathdata__WEBPACK_IMPORTED_MODULE_2__.SVGPathData.QUAD_TO && previousCommand !== svg_pathdata__WEBPACK_IMPORTED_MODULE_2__.SVGPathData.SMOOTH_QUAD_TO) {\n            return this.current;\n        }\n        // reflect point\n        const { current: { x: cx , y: cy  } , control: { x: ox , y: oy  }  } = this;\n        const point = new Point(2 * cx - ox, 2 * cy - oy);\n        return point;\n    }\n    makeAbsolute(point) {\n        if (this.command.relative) {\n            const { x , y  } = this.current;\n            point.x += x;\n            point.y += y;\n        }\n        return point;\n    }\n    addMarker(point, from, priorTo) {\n        const { points , angles  } = this;\n        // if the last angle isn't filled in because we didn't have this point yet ...\n        if (priorTo && angles.length > 0 && !angles[angles.length - 1]) {\n            angles[angles.length - 1] = points[points.length - 1].angleTo(priorTo);\n        }\n        this.addMarkerAngle(point, from ? from.angleTo(point) : null);\n    }\n    addMarkerAngle(point, angle) {\n        this.points.push(point);\n        this.angles.push(angle);\n    }\n    getMarkerPoints() {\n        return this.points;\n    }\n    getMarkerAngles() {\n        const { angles  } = this;\n        const len = angles.length;\n        for(let i = 0; i < len; i++){\n            if (!angles[i]) {\n                for(let j = i + 1; j < len; j++){\n                    if (angles[j]) {\n                        angles[i] = angles[j];\n                        break;\n                    }\n                }\n            }\n        }\n        return angles;\n    }\n    constructor(path){\n        super(path// Fix spaces after signs.\n        .replace(/([+\\-.])\\s+/gm, '$1')// Remove invalid part.\n        .replace(/[^MmZzLlHhVvCcSsQqTtAae\\d\\s.,+-].*/g, ''));\n        this.control = new Point(0, 0);\n        this.start = new Point(0, 0);\n        this.current = new Point(0, 0);\n        this.command = null;\n        this.commands = this.commands;\n        this.i = -1;\n        this.previousCommand = null;\n        this.points = [];\n        this.angles = [];\n    }\n}\n\nclass PathElement extends RenderedElement {\n    path(ctx) {\n        const { pathParser  } = this;\n        const boundingBox = new BoundingBox();\n        pathParser.reset();\n        if (ctx) {\n            ctx.beginPath();\n        }\n        while(!pathParser.isEnd()){\n            switch(pathParser.next().type){\n                case PathParser.MOVE_TO:\n                    this.pathM(ctx, boundingBox);\n                    break;\n                case PathParser.LINE_TO:\n                    this.pathL(ctx, boundingBox);\n                    break;\n                case PathParser.HORIZ_LINE_TO:\n                    this.pathH(ctx, boundingBox);\n                    break;\n                case PathParser.VERT_LINE_TO:\n                    this.pathV(ctx, boundingBox);\n                    break;\n                case PathParser.CURVE_TO:\n                    this.pathC(ctx, boundingBox);\n                    break;\n                case PathParser.SMOOTH_CURVE_TO:\n                    this.pathS(ctx, boundingBox);\n                    break;\n                case PathParser.QUAD_TO:\n                    this.pathQ(ctx, boundingBox);\n                    break;\n                case PathParser.SMOOTH_QUAD_TO:\n                    this.pathT(ctx, boundingBox);\n                    break;\n                case PathParser.ARC:\n                    this.pathA(ctx, boundingBox);\n                    break;\n                case PathParser.CLOSE_PATH:\n                    this.pathZ(ctx, boundingBox);\n                    break;\n            }\n        }\n        return boundingBox;\n    }\n    getBoundingBox(_ctx) {\n        return this.path();\n    }\n    getMarkers() {\n        const { pathParser  } = this;\n        const points = pathParser.getMarkerPoints();\n        const angles = pathParser.getMarkerAngles();\n        const markers = points.map((point, i)=>[\n                point,\n                angles[i]\n            ]\n        );\n        return markers;\n    }\n    renderChildren(ctx) {\n        this.path(ctx);\n        this.document.screen.mouse.checkPath(this, ctx);\n        const fillRuleStyleProp = this.getStyle('fill-rule');\n        if (ctx.fillStyle !== '') {\n            if (fillRuleStyleProp.getString('inherit') !== 'inherit') {\n                ctx.fill(fillRuleStyleProp.getString());\n            } else {\n                ctx.fill();\n            }\n        }\n        if (ctx.strokeStyle !== '') {\n            if (this.getAttribute('vector-effect').getString() === 'non-scaling-stroke') {\n                ctx.save();\n                ctx.setTransform(1, 0, 0, 1, 0, 0);\n                ctx.stroke();\n                ctx.restore();\n            } else {\n                ctx.stroke();\n            }\n        }\n        const markers = this.getMarkers();\n        if (markers) {\n            const markersLastIndex = markers.length - 1;\n            const markerStartStyleProp = this.getStyle('marker-start');\n            const markerMidStyleProp = this.getStyle('marker-mid');\n            const markerEndStyleProp = this.getStyle('marker-end');\n            if (markerStartStyleProp.isUrlDefinition()) {\n                const marker = markerStartStyleProp.getDefinition();\n                const [point, angle] = markers[0];\n                marker.render(ctx, point, angle);\n            }\n            if (markerMidStyleProp.isUrlDefinition()) {\n                const marker = markerMidStyleProp.getDefinition();\n                for(let i = 1; i < markersLastIndex; i++){\n                    const [point, angle] = markers[i];\n                    marker.render(ctx, point, angle);\n                }\n            }\n            if (markerEndStyleProp.isUrlDefinition()) {\n                const marker = markerEndStyleProp.getDefinition();\n                const [point, angle] = markers[markersLastIndex];\n                marker.render(ctx, point, angle);\n            }\n        }\n    }\n    static pathM(pathParser) {\n        const point = pathParser.getAsCurrentPoint();\n        pathParser.start = pathParser.current;\n        return {\n            point\n        };\n    }\n    pathM(ctx, boundingBox) {\n        const { pathParser  } = this;\n        const { point  } = PathElement.pathM(pathParser);\n        const { x , y  } = point;\n        pathParser.addMarker(point);\n        boundingBox.addPoint(x, y);\n        if (ctx) {\n            ctx.moveTo(x, y);\n        }\n    }\n    static pathL(pathParser) {\n        const { current  } = pathParser;\n        const point = pathParser.getAsCurrentPoint();\n        return {\n            current,\n            point\n        };\n    }\n    pathL(ctx, boundingBox) {\n        const { pathParser  } = this;\n        const { current , point  } = PathElement.pathL(pathParser);\n        const { x , y  } = point;\n        pathParser.addMarker(point, current);\n        boundingBox.addPoint(x, y);\n        if (ctx) {\n            ctx.lineTo(x, y);\n        }\n    }\n    static pathH(pathParser) {\n        const { current , command  } = pathParser;\n        const point = new Point((command.relative ? current.x : 0) + command.x, current.y);\n        pathParser.current = point;\n        return {\n            current,\n            point\n        };\n    }\n    pathH(ctx, boundingBox) {\n        const { pathParser  } = this;\n        const { current , point  } = PathElement.pathH(pathParser);\n        const { x , y  } = point;\n        pathParser.addMarker(point, current);\n        boundingBox.addPoint(x, y);\n        if (ctx) {\n            ctx.lineTo(x, y);\n        }\n    }\n    static pathV(pathParser) {\n        const { current , command  } = pathParser;\n        const point = new Point(current.x, (command.relative ? current.y : 0) + command.y);\n        pathParser.current = point;\n        return {\n            current,\n            point\n        };\n    }\n    pathV(ctx, boundingBox) {\n        const { pathParser  } = this;\n        const { current , point  } = PathElement.pathV(pathParser);\n        const { x , y  } = point;\n        pathParser.addMarker(point, current);\n        boundingBox.addPoint(x, y);\n        if (ctx) {\n            ctx.lineTo(x, y);\n        }\n    }\n    static pathC(pathParser) {\n        const { current  } = pathParser;\n        const point = pathParser.getPoint('x1', 'y1');\n        const controlPoint = pathParser.getAsControlPoint('x2', 'y2');\n        const currentPoint = pathParser.getAsCurrentPoint();\n        return {\n            current,\n            point,\n            controlPoint,\n            currentPoint\n        };\n    }\n    pathC(ctx, boundingBox) {\n        const { pathParser  } = this;\n        const { current , point , controlPoint , currentPoint  } = PathElement.pathC(pathParser);\n        pathParser.addMarker(currentPoint, controlPoint, point);\n        boundingBox.addBezierCurve(current.x, current.y, point.x, point.y, controlPoint.x, controlPoint.y, currentPoint.x, currentPoint.y);\n        if (ctx) {\n            ctx.bezierCurveTo(point.x, point.y, controlPoint.x, controlPoint.y, currentPoint.x, currentPoint.y);\n        }\n    }\n    static pathS(pathParser) {\n        const { current  } = pathParser;\n        const point = pathParser.getReflectedControlPoint();\n        const controlPoint = pathParser.getAsControlPoint('x2', 'y2');\n        const currentPoint = pathParser.getAsCurrentPoint();\n        return {\n            current,\n            point,\n            controlPoint,\n            currentPoint\n        };\n    }\n    pathS(ctx, boundingBox) {\n        const { pathParser  } = this;\n        const { current , point , controlPoint , currentPoint  } = PathElement.pathS(pathParser);\n        pathParser.addMarker(currentPoint, controlPoint, point);\n        boundingBox.addBezierCurve(current.x, current.y, point.x, point.y, controlPoint.x, controlPoint.y, currentPoint.x, currentPoint.y);\n        if (ctx) {\n            ctx.bezierCurveTo(point.x, point.y, controlPoint.x, controlPoint.y, currentPoint.x, currentPoint.y);\n        }\n    }\n    static pathQ(pathParser) {\n        const { current  } = pathParser;\n        const controlPoint = pathParser.getAsControlPoint('x1', 'y1');\n        const currentPoint = pathParser.getAsCurrentPoint();\n        return {\n            current,\n            controlPoint,\n            currentPoint\n        };\n    }\n    pathQ(ctx, boundingBox) {\n        const { pathParser  } = this;\n        const { current , controlPoint , currentPoint  } = PathElement.pathQ(pathParser);\n        pathParser.addMarker(currentPoint, controlPoint, controlPoint);\n        boundingBox.addQuadraticCurve(current.x, current.y, controlPoint.x, controlPoint.y, currentPoint.x, currentPoint.y);\n        if (ctx) {\n            ctx.quadraticCurveTo(controlPoint.x, controlPoint.y, currentPoint.x, currentPoint.y);\n        }\n    }\n    static pathT(pathParser) {\n        const { current  } = pathParser;\n        const controlPoint = pathParser.getReflectedControlPoint();\n        pathParser.control = controlPoint;\n        const currentPoint = pathParser.getAsCurrentPoint();\n        return {\n            current,\n            controlPoint,\n            currentPoint\n        };\n    }\n    pathT(ctx, boundingBox) {\n        const { pathParser  } = this;\n        const { current , controlPoint , currentPoint  } = PathElement.pathT(pathParser);\n        pathParser.addMarker(currentPoint, controlPoint, controlPoint);\n        boundingBox.addQuadraticCurve(current.x, current.y, controlPoint.x, controlPoint.y, currentPoint.x, currentPoint.y);\n        if (ctx) {\n            ctx.quadraticCurveTo(controlPoint.x, controlPoint.y, currentPoint.x, currentPoint.y);\n        }\n    }\n    static pathA(pathParser) {\n        const { current , command  } = pathParser;\n        let { rX , rY , xRot , lArcFlag , sweepFlag  } = command;\n        const xAxisRotation = xRot * (Math.PI / 180);\n        const currentPoint = pathParser.getAsCurrentPoint();\n        // Conversion from endpoint to center parameterization\n        // http://www.w3.org/TR/SVG11/implnote.html#ArcImplementationNotes\n        // x1', y1'\n        const currp = new Point(Math.cos(xAxisRotation) * (current.x - currentPoint.x) / 2 + Math.sin(xAxisRotation) * (current.y - currentPoint.y) / 2, -Math.sin(xAxisRotation) * (current.x - currentPoint.x) / 2 + Math.cos(xAxisRotation) * (current.y - currentPoint.y) / 2);\n        // adjust radii\n        const l = Math.pow(currp.x, 2) / Math.pow(rX, 2) + Math.pow(currp.y, 2) / Math.pow(rY, 2);\n        if (l > 1) {\n            rX *= Math.sqrt(l);\n            rY *= Math.sqrt(l);\n        }\n        // cx', cy'\n        let s = (lArcFlag === sweepFlag ? -1 : 1) * Math.sqrt((Math.pow(rX, 2) * Math.pow(rY, 2) - Math.pow(rX, 2) * Math.pow(currp.y, 2) - Math.pow(rY, 2) * Math.pow(currp.x, 2)) / (Math.pow(rX, 2) * Math.pow(currp.y, 2) + Math.pow(rY, 2) * Math.pow(currp.x, 2)));\n        if (isNaN(s)) {\n            s = 0;\n        }\n        const cpp = new Point(s * rX * currp.y / rY, s * -rY * currp.x / rX);\n        // cx, cy\n        const centp = new Point((current.x + currentPoint.x) / 2 + Math.cos(xAxisRotation) * cpp.x - Math.sin(xAxisRotation) * cpp.y, (current.y + currentPoint.y) / 2 + Math.sin(xAxisRotation) * cpp.x + Math.cos(xAxisRotation) * cpp.y);\n        // initial angle\n        const a1 = vectorsAngle([\n            1,\n            0\n        ], [\n            (currp.x - cpp.x) / rX,\n            (currp.y - cpp.y) / rY\n        ]) // θ1\n        ;\n        // angle delta\n        const u = [\n            (currp.x - cpp.x) / rX,\n            (currp.y - cpp.y) / rY\n        ];\n        const v = [\n            (-currp.x - cpp.x) / rX,\n            (-currp.y - cpp.y) / rY\n        ];\n        let ad = vectorsAngle(u, v) // Δθ\n        ;\n        if (vectorsRatio(u, v) <= -1) {\n            ad = Math.PI;\n        }\n        if (vectorsRatio(u, v) >= 1) {\n            ad = 0;\n        }\n        return {\n            currentPoint,\n            rX,\n            rY,\n            sweepFlag,\n            xAxisRotation,\n            centp,\n            a1,\n            ad\n        };\n    }\n    pathA(ctx, boundingBox) {\n        const { pathParser  } = this;\n        const { currentPoint , rX , rY , sweepFlag , xAxisRotation , centp , a1 , ad  } = PathElement.pathA(pathParser);\n        // for markers\n        const dir = 1 - sweepFlag ? 1 : -1;\n        const ah = a1 + dir * (ad / 2);\n        const halfWay = new Point(centp.x + rX * Math.cos(ah), centp.y + rY * Math.sin(ah));\n        pathParser.addMarkerAngle(halfWay, ah - dir * Math.PI / 2);\n        pathParser.addMarkerAngle(currentPoint, ah - dir * Math.PI);\n        boundingBox.addPoint(currentPoint.x, currentPoint.y) // TODO: this is too naive, make it better\n        ;\n        if (ctx && !isNaN(a1) && !isNaN(ad)) {\n            const r = rX > rY ? rX : rY;\n            const sx = rX > rY ? 1 : rX / rY;\n            const sy = rX > rY ? rY / rX : 1;\n            ctx.translate(centp.x, centp.y);\n            ctx.rotate(xAxisRotation);\n            ctx.scale(sx, sy);\n            ctx.arc(0, 0, r, a1, a1 + ad, Boolean(1 - sweepFlag));\n            ctx.scale(1 / sx, 1 / sy);\n            ctx.rotate(-xAxisRotation);\n            ctx.translate(-centp.x, -centp.y);\n        }\n    }\n    static pathZ(pathParser) {\n        pathParser.current = pathParser.start;\n    }\n    pathZ(ctx, boundingBox) {\n        PathElement.pathZ(this.pathParser);\n        if (ctx) {\n            // only close path if it is not a straight line\n            if (boundingBox.x1 !== boundingBox.x2 && boundingBox.y1 !== boundingBox.y2) {\n                ctx.closePath();\n            }\n        }\n    }\n    constructor(document, node, captureTextNodes){\n        super(document, node, captureTextNodes);\n        this.type = 'path';\n        this.pathParser = new PathParser(this.getAttribute('d').getString());\n    }\n}\n\nclass SVGElement extends RenderedElement {\n    setContext(ctx) {\n        var ref;\n        const { document  } = this;\n        const { screen , window  } = document;\n        const canvas = ctx.canvas;\n        screen.setDefaults(ctx);\n        if ('style' in canvas && typeof ctx.font !== 'undefined' && window && typeof window.getComputedStyle !== 'undefined') {\n            ctx.font = window.getComputedStyle(canvas).getPropertyValue('font');\n            const fontSizeProp = new Property(document, 'fontSize', Font.parse(ctx.font).fontSize);\n            if (fontSizeProp.hasValue()) {\n                document.rootEmSize = fontSizeProp.getPixels('y');\n                document.emSize = document.rootEmSize;\n            }\n        }\n        // create new view port\n        if (!this.getAttribute('x').hasValue()) {\n            this.getAttribute('x', true).setValue(0);\n        }\n        if (!this.getAttribute('y').hasValue()) {\n            this.getAttribute('y', true).setValue(0);\n        }\n        let { width , height  } = screen.viewPort;\n        if (!this.getStyle('width').hasValue()) {\n            this.getStyle('width', true).setValue('100%');\n        }\n        if (!this.getStyle('height').hasValue()) {\n            this.getStyle('height', true).setValue('100%');\n        }\n        if (!this.getStyle('color').hasValue()) {\n            this.getStyle('color', true).setValue('black');\n        }\n        const refXAttr = this.getAttribute('refX');\n        const refYAttr = this.getAttribute('refY');\n        const viewBoxAttr = this.getAttribute('viewBox');\n        const viewBox = viewBoxAttr.hasValue() ? toNumbers(viewBoxAttr.getString()) : null;\n        const clip = !this.root && this.getStyle('overflow').getValue('hidden') !== 'visible';\n        let minX = 0;\n        let minY = 0;\n        let clipX = 0;\n        let clipY = 0;\n        if (viewBox) {\n            minX = viewBox[0];\n            minY = viewBox[1];\n        }\n        if (!this.root) {\n            width = this.getStyle('width').getPixels('x');\n            height = this.getStyle('height').getPixels('y');\n            if (this.type === 'marker') {\n                clipX = minX;\n                clipY = minY;\n                minX = 0;\n                minY = 0;\n            }\n        }\n        screen.viewPort.setCurrent(width, height);\n        // Default value of transform-origin is center only for root SVG elements\n        // https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/transform-origin\n        if (this.node // is not temporary SVGElement\n         && (!this.parent || ((ref = this.node.parentNode) === null || ref === void 0 ? void 0 : ref.nodeName) === 'foreignObject') && this.getStyle('transform', false, true).hasValue() && !this.getStyle('transform-origin', false, true).hasValue()) {\n            this.getStyle('transform-origin', true, true).setValue('50% 50%');\n        }\n        super.setContext(ctx);\n        ctx.translate(this.getAttribute('x').getPixels('x'), this.getAttribute('y').getPixels('y'));\n        if (viewBox) {\n            width = viewBox[2];\n            height = viewBox[3];\n        }\n        document.setViewBox({\n            ctx,\n            aspectRatio: this.getAttribute('preserveAspectRatio').getString(),\n            width: screen.viewPort.width,\n            desiredWidth: width,\n            height: screen.viewPort.height,\n            desiredHeight: height,\n            minX,\n            minY,\n            refX: refXAttr.getValue(),\n            refY: refYAttr.getValue(),\n            clip,\n            clipX,\n            clipY\n        });\n        if (viewBox) {\n            screen.viewPort.removeCurrent();\n            screen.viewPort.setCurrent(width, height);\n        }\n    }\n    clearContext(ctx) {\n        super.clearContext(ctx);\n        this.document.screen.viewPort.removeCurrent();\n    }\n    /**\n   * Resize SVG to fit in given size.\n   * @param width\n   * @param height\n   * @param preserveAspectRatio\n   */ resize(width) {\n        let height = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : width, preserveAspectRatio = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;\n        const widthAttr = this.getAttribute('width', true);\n        const heightAttr = this.getAttribute('height', true);\n        const viewBoxAttr = this.getAttribute('viewBox');\n        const styleAttr = this.getAttribute('style');\n        const originWidth = widthAttr.getNumber(0);\n        const originHeight = heightAttr.getNumber(0);\n        if (preserveAspectRatio) {\n            if (typeof preserveAspectRatio === 'string') {\n                this.getAttribute('preserveAspectRatio', true).setValue(preserveAspectRatio);\n            } else {\n                const preserveAspectRatioAttr = this.getAttribute('preserveAspectRatio');\n                if (preserveAspectRatioAttr.hasValue()) {\n                    preserveAspectRatioAttr.setValue(preserveAspectRatioAttr.getString().replace(/^\\s*(\\S.*\\S)\\s*$/, '$1'));\n                }\n            }\n        }\n        widthAttr.setValue(width);\n        heightAttr.setValue(height);\n        if (!viewBoxAttr.hasValue()) {\n            viewBoxAttr.setValue(\"0 0 \".concat(originWidth || width, \" \").concat(originHeight || height));\n        }\n        if (styleAttr.hasValue()) {\n            const widthStyle = this.getStyle('width');\n            const heightStyle = this.getStyle('height');\n            if (widthStyle.hasValue()) {\n                widthStyle.setValue(\"\".concat(width, \"px\"));\n            }\n            if (heightStyle.hasValue()) {\n                heightStyle.setValue(\"\".concat(height, \"px\"));\n            }\n        }\n    }\n    constructor(...args){\n        super(...args);\n        this.type = 'svg';\n        this.root = false;\n    }\n}\n\nclass RectElement extends PathElement {\n    path(ctx) {\n        const x = this.getAttribute('x').getPixels('x');\n        const y = this.getAttribute('y').getPixels('y');\n        const width = this.getStyle('width', false, true).getPixels('x');\n        const height = this.getStyle('height', false, true).getPixels('y');\n        const rxAttr = this.getAttribute('rx');\n        const ryAttr = this.getAttribute('ry');\n        let rx = rxAttr.getPixels('x');\n        let ry = ryAttr.getPixels('y');\n        if (rxAttr.hasValue() && !ryAttr.hasValue()) {\n            ry = rx;\n        }\n        if (ryAttr.hasValue() && !rxAttr.hasValue()) {\n            rx = ry;\n        }\n        rx = Math.min(rx, width / 2);\n        ry = Math.min(ry, height / 2);\n        if (ctx) {\n            const KAPPA = 4 * ((Math.sqrt(2) - 1) / 3);\n            ctx.beginPath() // always start the path so we don't fill prior paths\n            ;\n            if (height > 0 && width > 0) {\n                ctx.moveTo(x + rx, y);\n                ctx.lineTo(x + width - rx, y);\n                ctx.bezierCurveTo(x + width - rx + KAPPA * rx, y, x + width, y + ry - KAPPA * ry, x + width, y + ry);\n                ctx.lineTo(x + width, y + height - ry);\n                ctx.bezierCurveTo(x + width, y + height - ry + KAPPA * ry, x + width - rx + KAPPA * rx, y + height, x + width - rx, y + height);\n                ctx.lineTo(x + rx, y + height);\n                ctx.bezierCurveTo(x + rx - KAPPA * rx, y + height, x, y + height - ry + KAPPA * ry, x, y + height - ry);\n                ctx.lineTo(x, y + ry);\n                ctx.bezierCurveTo(x, y + ry - KAPPA * ry, x + rx - KAPPA * rx, y, x + rx, y);\n                ctx.closePath();\n            }\n        }\n        return new BoundingBox(x, y, x + width, y + height);\n    }\n    getMarkers() {\n        return null;\n    }\n    constructor(...args){\n        super(...args);\n        this.type = 'rect';\n    }\n}\n\nclass CircleElement extends PathElement {\n    path(ctx) {\n        const cx = this.getAttribute('cx').getPixels('x');\n        const cy = this.getAttribute('cy').getPixels('y');\n        const r = this.getAttribute('r').getPixels();\n        if (ctx && r > 0) {\n            ctx.beginPath();\n            ctx.arc(cx, cy, r, 0, Math.PI * 2, false);\n            ctx.closePath();\n        }\n        return new BoundingBox(cx - r, cy - r, cx + r, cy + r);\n    }\n    getMarkers() {\n        return null;\n    }\n    constructor(...args){\n        super(...args);\n        this.type = 'circle';\n    }\n}\n\nclass EllipseElement extends PathElement {\n    path(ctx) {\n        const KAPPA = 4 * ((Math.sqrt(2) - 1) / 3);\n        const rx = this.getAttribute('rx').getPixels('x');\n        const ry = this.getAttribute('ry').getPixels('y');\n        const cx = this.getAttribute('cx').getPixels('x');\n        const cy = this.getAttribute('cy').getPixels('y');\n        if (ctx && rx > 0 && ry > 0) {\n            ctx.beginPath();\n            ctx.moveTo(cx + rx, cy);\n            ctx.bezierCurveTo(cx + rx, cy + KAPPA * ry, cx + KAPPA * rx, cy + ry, cx, cy + ry);\n            ctx.bezierCurveTo(cx - KAPPA * rx, cy + ry, cx - rx, cy + KAPPA * ry, cx - rx, cy);\n            ctx.bezierCurveTo(cx - rx, cy - KAPPA * ry, cx - KAPPA * rx, cy - ry, cx, cy - ry);\n            ctx.bezierCurveTo(cx + KAPPA * rx, cy - ry, cx + rx, cy - KAPPA * ry, cx + rx, cy);\n            ctx.closePath();\n        }\n        return new BoundingBox(cx - rx, cy - ry, cx + rx, cy + ry);\n    }\n    getMarkers() {\n        return null;\n    }\n    constructor(...args){\n        super(...args);\n        this.type = 'ellipse';\n    }\n}\n\nclass LineElement extends PathElement {\n    getPoints() {\n        return [\n            new Point(this.getAttribute('x1').getPixels('x'), this.getAttribute('y1').getPixels('y')),\n            new Point(this.getAttribute('x2').getPixels('x'), this.getAttribute('y2').getPixels('y'))\n        ];\n    }\n    path(ctx) {\n        const [{ x: x0 , y: y0  }, { x: x1 , y: y1  }] = this.getPoints();\n        if (ctx) {\n            ctx.beginPath();\n            ctx.moveTo(x0, y0);\n            ctx.lineTo(x1, y1);\n        }\n        return new BoundingBox(x0, y0, x1, y1);\n    }\n    getMarkers() {\n        const [p0, p1] = this.getPoints();\n        const a = p0.angleTo(p1);\n        return [\n            [\n                p0,\n                a\n            ],\n            [\n                p1,\n                a\n            ]\n        ];\n    }\n    constructor(...args){\n        super(...args);\n        this.type = 'line';\n    }\n}\n\nclass PolylineElement extends PathElement {\n    path(ctx) {\n        const { points  } = this;\n        const [{ x: x0 , y: y0  }] = points;\n        const boundingBox = new BoundingBox(x0, y0);\n        if (ctx) {\n            ctx.beginPath();\n            ctx.moveTo(x0, y0);\n        }\n        points.forEach((param)=>{\n            let { x , y  } = param;\n            boundingBox.addPoint(x, y);\n            if (ctx) {\n                ctx.lineTo(x, y);\n            }\n        });\n        return boundingBox;\n    }\n    getMarkers() {\n        const { points  } = this;\n        const lastIndex = points.length - 1;\n        const markers = [];\n        points.forEach((point, i)=>{\n            if (i === lastIndex) {\n                return;\n            }\n            markers.push([\n                point,\n                point.angleTo(points[i + 1])\n            ]);\n        });\n        if (markers.length > 0) {\n            markers.push([\n                points[points.length - 1],\n                markers[markers.length - 1][1]\n            ]);\n        }\n        return markers;\n    }\n    constructor(document, node, captureTextNodes){\n        super(document, node, captureTextNodes);\n        this.type = 'polyline';\n        this.points = [];\n        this.points = Point.parsePath(this.getAttribute('points').getString());\n    }\n}\n\nclass PolygonElement extends PolylineElement {\n    path(ctx) {\n        const boundingBox = super.path(ctx);\n        const [{ x , y  }] = this.points;\n        if (ctx) {\n            ctx.lineTo(x, y);\n            ctx.closePath();\n        }\n        return boundingBox;\n    }\n    constructor(...args){\n        super(...args);\n        this.type = 'polygon';\n    }\n}\n\nclass PatternElement extends Element {\n    createPattern(ctx, _, parentOpacityProp) {\n        const width = this.getStyle('width').getPixels('x', true);\n        const height = this.getStyle('height').getPixels('y', true);\n        // render me using a temporary svg element\n        const patternSvg = new SVGElement(this.document, null);\n        patternSvg.attributes.viewBox = new Property(this.document, 'viewBox', this.getAttribute('viewBox').getValue());\n        patternSvg.attributes.width = new Property(this.document, 'width', \"\".concat(width, \"px\"));\n        patternSvg.attributes.height = new Property(this.document, 'height', \"\".concat(height, \"px\"));\n        patternSvg.attributes.transform = new Property(this.document, 'transform', this.getAttribute('patternTransform').getValue());\n        patternSvg.children = this.children;\n        const patternCanvas = this.document.createCanvas(width, height);\n        const patternCtx = patternCanvas.getContext('2d');\n        const xAttr = this.getAttribute('x');\n        const yAttr = this.getAttribute('y');\n        if (xAttr.hasValue() && yAttr.hasValue()) {\n            patternCtx.translate(xAttr.getPixels('x', true), yAttr.getPixels('y', true));\n        }\n        if (parentOpacityProp.hasValue()) {\n            this.styles['fill-opacity'] = parentOpacityProp;\n        } else {\n            Reflect.deleteProperty(this.styles, 'fill-opacity');\n        }\n        // render 3x3 grid so when we transform there's no white space on edges\n        for(let x = -1; x <= 1; x++){\n            for(let y = -1; y <= 1; y++){\n                patternCtx.save();\n                patternSvg.attributes.x = new Property(this.document, 'x', x * patternCanvas.width);\n                patternSvg.attributes.y = new Property(this.document, 'y', y * patternCanvas.height);\n                patternSvg.render(patternCtx);\n                patternCtx.restore();\n            }\n        }\n        const pattern = ctx.createPattern(patternCanvas, 'repeat');\n        return pattern;\n    }\n    constructor(...args){\n        super(...args);\n        this.type = 'pattern';\n    }\n}\n\nclass MarkerElement extends Element {\n    render(ctx, point, angle) {\n        if (!point) {\n            return;\n        }\n        const { x , y  } = point;\n        const orient = this.getAttribute('orient').getString('auto');\n        const markerUnits = this.getAttribute('markerUnits').getString('strokeWidth');\n        ctx.translate(x, y);\n        if (orient === 'auto') {\n            ctx.rotate(angle);\n        }\n        if (markerUnits === 'strokeWidth') {\n            ctx.scale(ctx.lineWidth, ctx.lineWidth);\n        }\n        ctx.save();\n        // render me using a temporary svg element\n        const markerSvg = new SVGElement(this.document);\n        markerSvg.type = this.type;\n        markerSvg.attributes.viewBox = new Property(this.document, 'viewBox', this.getAttribute('viewBox').getValue());\n        markerSvg.attributes.refX = new Property(this.document, 'refX', this.getAttribute('refX').getValue());\n        markerSvg.attributes.refY = new Property(this.document, 'refY', this.getAttribute('refY').getValue());\n        markerSvg.attributes.width = new Property(this.document, 'width', this.getAttribute('markerWidth').getValue());\n        markerSvg.attributes.height = new Property(this.document, 'height', this.getAttribute('markerHeight').getValue());\n        markerSvg.attributes.overflow = new Property(this.document, 'overflow', this.getAttribute('overflow').getValue());\n        markerSvg.attributes.fill = new Property(this.document, 'fill', this.getAttribute('fill').getColor('black'));\n        markerSvg.attributes.stroke = new Property(this.document, 'stroke', this.getAttribute('stroke').getValue('none'));\n        markerSvg.children = this.children;\n        markerSvg.render(ctx);\n        ctx.restore();\n        if (markerUnits === 'strokeWidth') {\n            ctx.scale(1 / ctx.lineWidth, 1 / ctx.lineWidth);\n        }\n        if (orient === 'auto') {\n            ctx.rotate(-angle);\n        }\n        ctx.translate(-x, -y);\n    }\n    constructor(...args){\n        super(...args);\n        this.type = 'marker';\n    }\n}\n\nclass DefsElement extends Element {\n    render() {\n    // NOOP\n    }\n    constructor(...args){\n        super(...args);\n        this.type = 'defs';\n    }\n}\n\nclass GElement extends RenderedElement {\n    getBoundingBox(ctx) {\n        const boundingBox = new BoundingBox();\n        this.children.forEach((child)=>{\n            boundingBox.addBoundingBox(child.getBoundingBox(ctx));\n        });\n        return boundingBox;\n    }\n    constructor(...args){\n        super(...args);\n        this.type = 'g';\n    }\n}\n\nclass GradientElement extends Element {\n    getGradientUnits() {\n        return this.getAttribute('gradientUnits').getString('objectBoundingBox');\n    }\n    createGradient(ctx, element, parentOpacityProp) {\n        // eslint-disable-next-line @typescript-eslint/no-this-alias, consistent-this\n        let stopsContainer = this;\n        if (this.getHrefAttribute().hasValue()) {\n            stopsContainer = this.getHrefAttribute().getDefinition();\n            this.inheritStopContainer(stopsContainer);\n        }\n        const { stops  } = stopsContainer;\n        const gradient = this.getGradient(ctx, element);\n        if (!gradient) {\n            return this.addParentOpacity(parentOpacityProp, stops[stops.length - 1].color);\n        }\n        stops.forEach((stop)=>{\n            gradient.addColorStop(stop.offset, this.addParentOpacity(parentOpacityProp, stop.color));\n        });\n        if (this.getAttribute('gradientTransform').hasValue()) {\n            // render as transformed pattern on temporary canvas\n            const { document  } = this;\n            const { MAX_VIRTUAL_PIXELS  } = Screen;\n            const { viewPort  } = document.screen;\n            const rootView = viewPort.getRoot();\n            const rect = new RectElement(document);\n            rect.attributes.x = new Property(document, 'x', -MAX_VIRTUAL_PIXELS / 3);\n            rect.attributes.y = new Property(document, 'y', -MAX_VIRTUAL_PIXELS / 3);\n            rect.attributes.width = new Property(document, 'width', MAX_VIRTUAL_PIXELS);\n            rect.attributes.height = new Property(document, 'height', MAX_VIRTUAL_PIXELS);\n            const group = new GElement(document);\n            group.attributes.transform = new Property(document, 'transform', this.getAttribute('gradientTransform').getValue());\n            group.children = [\n                rect\n            ];\n            const patternSvg = new SVGElement(document);\n            patternSvg.attributes.x = new Property(document, 'x', 0);\n            patternSvg.attributes.y = new Property(document, 'y', 0);\n            patternSvg.attributes.width = new Property(document, 'width', rootView.width);\n            patternSvg.attributes.height = new Property(document, 'height', rootView.height);\n            patternSvg.children = [\n                group\n            ];\n            const patternCanvas = document.createCanvas(rootView.width, rootView.height);\n            const patternCtx = patternCanvas.getContext('2d');\n            patternCtx.fillStyle = gradient;\n            patternSvg.render(patternCtx);\n            return patternCtx.createPattern(patternCanvas, 'no-repeat');\n        }\n        return gradient;\n    }\n    inheritStopContainer(stopsContainer) {\n        this.attributesToInherit.forEach((attributeToInherit)=>{\n            if (!this.getAttribute(attributeToInherit).hasValue() && stopsContainer.getAttribute(attributeToInherit).hasValue()) {\n                this.getAttribute(attributeToInherit, true).setValue(stopsContainer.getAttribute(attributeToInherit).getValue());\n            }\n        });\n    }\n    addParentOpacity(parentOpacityProp, color) {\n        if (parentOpacityProp.hasValue()) {\n            const colorProp = new Property(this.document, 'color', color);\n            return colorProp.addOpacity(parentOpacityProp).getColor();\n        }\n        return color;\n    }\n    constructor(document, node, captureTextNodes){\n        super(document, node, captureTextNodes);\n        this.attributesToInherit = [\n            'gradientUnits'\n        ];\n        this.stops = [];\n        const { stops , children  } = this;\n        children.forEach((child)=>{\n            if (child.type === 'stop') {\n                stops.push(child);\n            }\n        });\n    }\n}\n\nclass LinearGradientElement extends GradientElement {\n    getGradient(ctx, element) {\n        const isBoundingBoxUnits = this.getGradientUnits() === 'objectBoundingBox';\n        const boundingBox = isBoundingBoxUnits ? element.getBoundingBox(ctx) : null;\n        if (isBoundingBoxUnits && !boundingBox) {\n            return null;\n        }\n        if (!this.getAttribute('x1').hasValue() && !this.getAttribute('y1').hasValue() && !this.getAttribute('x2').hasValue() && !this.getAttribute('y2').hasValue()) {\n            this.getAttribute('x1', true).setValue(0);\n            this.getAttribute('y1', true).setValue(0);\n            this.getAttribute('x2', true).setValue(1);\n            this.getAttribute('y2', true).setValue(0);\n        }\n        const x1 = isBoundingBoxUnits ? boundingBox.x + boundingBox.width * this.getAttribute('x1').getNumber() : this.getAttribute('x1').getPixels('x');\n        const y1 = isBoundingBoxUnits ? boundingBox.y + boundingBox.height * this.getAttribute('y1').getNumber() : this.getAttribute('y1').getPixels('y');\n        const x2 = isBoundingBoxUnits ? boundingBox.x + boundingBox.width * this.getAttribute('x2').getNumber() : this.getAttribute('x2').getPixels('x');\n        const y2 = isBoundingBoxUnits ? boundingBox.y + boundingBox.height * this.getAttribute('y2').getNumber() : this.getAttribute('y2').getPixels('y');\n        if (x1 === x2 && y1 === y2) {\n            return null;\n        }\n        return ctx.createLinearGradient(x1, y1, x2, y2);\n    }\n    constructor(document, node, captureTextNodes){\n        super(document, node, captureTextNodes);\n        this.type = 'linearGradient';\n        this.attributesToInherit.push('x1', 'y1', 'x2', 'y2');\n    }\n}\n\nclass RadialGradientElement extends GradientElement {\n    getGradient(ctx, element) {\n        const isBoundingBoxUnits = this.getGradientUnits() === 'objectBoundingBox';\n        const boundingBox = element.getBoundingBox(ctx);\n        if (isBoundingBoxUnits && !boundingBox) {\n            return null;\n        }\n        if (!this.getAttribute('cx').hasValue()) {\n            this.getAttribute('cx', true).setValue('50%');\n        }\n        if (!this.getAttribute('cy').hasValue()) {\n            this.getAttribute('cy', true).setValue('50%');\n        }\n        if (!this.getAttribute('r').hasValue()) {\n            this.getAttribute('r', true).setValue('50%');\n        }\n        const cx = isBoundingBoxUnits ? boundingBox.x + boundingBox.width * this.getAttribute('cx').getNumber() : this.getAttribute('cx').getPixels('x');\n        const cy = isBoundingBoxUnits ? boundingBox.y + boundingBox.height * this.getAttribute('cy').getNumber() : this.getAttribute('cy').getPixels('y');\n        let fx = cx;\n        let fy = cy;\n        if (this.getAttribute('fx').hasValue()) {\n            fx = isBoundingBoxUnits ? boundingBox.x + boundingBox.width * this.getAttribute('fx').getNumber() : this.getAttribute('fx').getPixels('x');\n        }\n        if (this.getAttribute('fy').hasValue()) {\n            fy = isBoundingBoxUnits ? boundingBox.y + boundingBox.height * this.getAttribute('fy').getNumber() : this.getAttribute('fy').getPixels('y');\n        }\n        const r = isBoundingBoxUnits ? (boundingBox.width + boundingBox.height) / 2 * this.getAttribute('r').getNumber() : this.getAttribute('r').getPixels();\n        const fr = this.getAttribute('fr').getPixels();\n        return ctx.createRadialGradient(fx, fy, fr, cx, cy, r);\n    }\n    constructor(document, node, captureTextNodes){\n        super(document, node, captureTextNodes);\n        this.type = 'radialGradient';\n        this.attributesToInherit.push('cx', 'cy', 'r', 'fx', 'fy', 'fr');\n    }\n}\n\nclass StopElement extends Element {\n    constructor(document, node, captureTextNodes){\n        super(document, node, captureTextNodes);\n        this.type = 'stop';\n        const offset = Math.max(0, Math.min(1, this.getAttribute('offset').getNumber()));\n        const stopOpacity = this.getStyle('stop-opacity');\n        let stopColor = this.getStyle('stop-color', true);\n        if (stopColor.getString() === '') {\n            stopColor.setValue('#000');\n        }\n        if (stopOpacity.hasValue()) {\n            stopColor = stopColor.addOpacity(stopOpacity);\n        }\n        this.offset = offset;\n        this.color = stopColor.getColor();\n    }\n}\n\nclass AnimateElement extends Element {\n    getProperty() {\n        const attributeType = this.getAttribute('attributeType').getString();\n        const attributeName = this.getAttribute('attributeName').getString();\n        if (attributeType === 'CSS') {\n            return this.parent.getStyle(attributeName, true);\n        }\n        return this.parent.getAttribute(attributeName, true);\n    }\n    calcValue() {\n        const { initialUnits  } = this;\n        const { progress , from , to  } = this.getProgress();\n        // tween value linearly\n        let newValue = from.getNumber() + (to.getNumber() - from.getNumber()) * progress;\n        if (initialUnits === '%') {\n            newValue *= 100 // numValue() returns 0-1 whereas properties are 0-100\n            ;\n        }\n        return \"\".concat(newValue).concat(initialUnits);\n    }\n    update(delta) {\n        const { parent  } = this;\n        const prop = this.getProperty();\n        // set initial value\n        if (!this.initialValue) {\n            this.initialValue = prop.getString();\n            this.initialUnits = prop.getUnits();\n        }\n        // if we're past the end time\n        if (this.duration > this.maxDuration) {\n            const fill = this.getAttribute('fill').getString('remove');\n            // loop for indefinitely repeating animations\n            if (this.getAttribute('repeatCount').getString() === 'indefinite' || this.getAttribute('repeatDur').getString() === 'indefinite') {\n                this.duration = 0;\n            } else if (fill === 'freeze' && !this.frozen) {\n                this.frozen = true;\n                if (parent && prop) {\n                    parent.animationFrozen = true;\n                    parent.animationFrozenValue = prop.getString();\n                }\n            } else if (fill === 'remove' && !this.removed) {\n                this.removed = true;\n                if (parent && prop) {\n                    prop.setValue(parent.animationFrozen ? parent.animationFrozenValue : this.initialValue);\n                }\n                return true;\n            }\n            return false;\n        }\n        this.duration += delta;\n        // if we're past the begin time\n        let updated = false;\n        if (this.begin < this.duration) {\n            let newValue = this.calcValue() // tween\n            ;\n            const typeAttr = this.getAttribute('type');\n            if (typeAttr.hasValue()) {\n                // for transform, etc.\n                const type = typeAttr.getString();\n                newValue = \"\".concat(type, \"(\").concat(newValue, \")\");\n            }\n            prop.setValue(newValue);\n            updated = true;\n        }\n        return updated;\n    }\n    getProgress() {\n        const { document , values  } = this;\n        let progress = (this.duration - this.begin) / (this.maxDuration - this.begin);\n        let from;\n        let to;\n        if (values.hasValue()) {\n            const p = progress * (values.getValue().length - 1);\n            const lb = Math.floor(p);\n            const ub = Math.ceil(p);\n            let value;\n            value = values.getValue()[lb];\n            from = new Property(document, 'from', value ? parseFloat(value) : 0);\n            value = values.getValue()[ub];\n            to = new Property(document, 'to', value ? parseFloat(value) : 0);\n            progress = (p - lb) / (ub - lb);\n        } else {\n            from = this.from;\n            to = this.to;\n        }\n        return {\n            progress,\n            from,\n            to\n        };\n    }\n    constructor(document, node, captureTextNodes){\n        super(document, node, captureTextNodes);\n        this.type = 'animate';\n        this.duration = 0;\n        this.initialUnits = '';\n        this.removed = false;\n        this.frozen = false;\n        document.screen.animations.push(this);\n        this.begin = this.getAttribute('begin').getMilliseconds();\n        this.maxDuration = this.begin + this.getAttribute('dur').getMilliseconds();\n        this.from = this.getAttribute('from');\n        this.to = this.getAttribute('to');\n        this.values = new Property(document, 'values', null);\n        const valuesAttr = this.getAttribute('values');\n        if (valuesAttr.hasValue()) {\n            this.values.setValue(valuesAttr.getString().split(';'));\n        }\n    }\n}\n\nclass AnimateColorElement extends AnimateElement {\n    calcValue() {\n        const { progress , from , to  } = this.getProgress();\n        const colorFrom = new rgbcolor__WEBPACK_IMPORTED_MODULE_1__(from.getColor());\n        const colorTo = new rgbcolor__WEBPACK_IMPORTED_MODULE_1__(to.getColor());\n        if (colorFrom.ok && colorTo.ok) {\n            // tween color linearly\n            const r = colorFrom.r + (colorTo.r - colorFrom.r) * progress;\n            const g = colorFrom.g + (colorTo.g - colorFrom.g) * progress;\n            const b = colorFrom.b + (colorTo.b - colorFrom.b) * progress;\n            // ? alpha\n            return \"rgb(\".concat(Math.floor(r), \", \").concat(Math.floor(g), \", \").concat(Math.floor(b), \")\");\n        }\n        return this.getAttribute('from').getColor();\n    }\n    constructor(...args){\n        super(...args);\n        this.type = 'animateColor';\n    }\n}\n\nclass AnimateTransformElement extends AnimateElement {\n    calcValue() {\n        const { progress , from: from1 , to: to1  } = this.getProgress();\n        // tween value linearly\n        const transformFrom = toNumbers(from1.getString());\n        const transformTo = toNumbers(to1.getString());\n        const newValue = transformFrom.map((from, i)=>{\n            const to = transformTo[i];\n            return from + (to - from) * progress;\n        }).join(' ');\n        return newValue;\n    }\n    constructor(...args){\n        super(...args);\n        this.type = 'animateTransform';\n    }\n}\n\nclass FontFaceElement extends Element {\n    constructor(document, node, captureTextNodes){\n        super(document, node, captureTextNodes);\n        this.type = 'font-face';\n        this.ascent = this.getAttribute('ascent').getNumber();\n        this.descent = this.getAttribute('descent').getNumber();\n        this.unitsPerEm = this.getAttribute('units-per-em').getNumber();\n    }\n}\n\nclass GlyphElement extends PathElement {\n    constructor(document, node, captureTextNodes){\n        super(document, node, captureTextNodes);\n        this.type = 'glyph';\n        this.horizAdvX = this.getAttribute('horiz-adv-x').getNumber();\n        this.unicode = this.getAttribute('unicode').getString();\n        this.arabicForm = this.getAttribute('arabic-form').getString();\n    }\n}\n\nclass MissingGlyphElement extends GlyphElement {\n    constructor(...args){\n        super(...args);\n        this.type = 'missing-glyph';\n        this.horizAdvX = 0;\n    }\n}\n\nclass FontElement extends Element {\n    render() {\n    // NO RENDER\n    }\n    constructor(document, node, captureTextNodes){\n        super(document, node, captureTextNodes);\n        this.type = 'font';\n        this.isArabic = false;\n        this.glyphs = {};\n        this.arabicGlyphs = {};\n        this.isRTL = false;\n        this.horizAdvX = this.getAttribute('horiz-adv-x').getNumber();\n        const { definitions  } = document;\n        const { children  } = this;\n        for (const child of children){\n            if (child instanceof FontFaceElement) {\n                this.fontFace = child;\n                const fontFamilyStyle = child.getStyle('font-family');\n                if (fontFamilyStyle.hasValue()) {\n                    definitions[fontFamilyStyle.getString()] = this;\n                }\n            } else if (child instanceof MissingGlyphElement) {\n                this.missingGlyph = child;\n            } else if (child instanceof GlyphElement) {\n                if (child.arabicForm) {\n                    this.isRTL = true;\n                    this.isArabic = true;\n                    const arabicGlyph = this.arabicGlyphs[child.unicode];\n                    if (typeof arabicGlyph === 'undefined') {\n                        this.arabicGlyphs[child.unicode] = {\n                            [child.arabicForm]: child\n                        };\n                    } else {\n                        arabicGlyph[child.arabicForm] = child;\n                    }\n                } else {\n                    this.glyphs[child.unicode] = child;\n                }\n            }\n        }\n    }\n}\n\nclass TRefElement extends TextElement {\n    getText() {\n        const element = this.getHrefAttribute().getDefinition();\n        if (element) {\n            const firstChild = element.children[0];\n            if (firstChild) {\n                return firstChild.getText();\n            }\n        }\n        return '';\n    }\n    constructor(...args){\n        super(...args);\n        this.type = 'tref';\n    }\n}\n\nclass AElement extends TextElement {\n    getText() {\n        return this.text;\n    }\n    renderChildren(ctx) {\n        if (this.hasText) {\n            // render as text element\n            super.renderChildren(ctx);\n            const { document , x , y  } = this;\n            const { mouse  } = document.screen;\n            const fontSize = new Property(document, 'fontSize', Font.parse(document.ctx.font).fontSize);\n            // Do not calc bounding box if mouse is not working.\n            if (mouse.isWorking()) {\n                mouse.checkBoundingBox(this, new BoundingBox(x, y - fontSize.getPixels('y'), x + this.measureText(ctx), y));\n            }\n        } else if (this.children.length > 0) {\n            // render as temporary group\n            const g = new GElement(this.document);\n            g.children = this.children;\n            g.parent = this;\n            g.render(ctx);\n        }\n    }\n    onClick() {\n        const { window  } = this.document;\n        if (window) {\n            window.open(this.getHrefAttribute().getString());\n        }\n    }\n    onMouseMove() {\n        const ctx = this.document.ctx;\n        ctx.canvas.style.cursor = 'pointer';\n    }\n    constructor(document, node1, captureTextNodes){\n        super(document, node1, captureTextNodes);\n        this.type = 'a';\n        const { childNodes  } = node1;\n        const firstChild = childNodes[0];\n        const hasText = childNodes.length > 0 && Array.from(childNodes).every((node)=>node.nodeType === 3\n        );\n        this.hasText = hasText;\n        this.text = hasText ? this.getTextFromNode(firstChild) : '';\n    }\n}\n\nclass TextPathElement extends TextElement {\n    getText() {\n        return this.text;\n    }\n    path(ctx) {\n        const { dataArray  } = this;\n        if (ctx) {\n            ctx.beginPath();\n        }\n        dataArray.forEach((param)=>{\n            let { type , points  } = param;\n            switch(type){\n                case PathParser.LINE_TO:\n                    if (ctx) {\n                        ctx.lineTo(points[0], points[1]);\n                    }\n                    break;\n                case PathParser.MOVE_TO:\n                    if (ctx) {\n                        ctx.moveTo(points[0], points[1]);\n                    }\n                    break;\n                case PathParser.CURVE_TO:\n                    if (ctx) {\n                        ctx.bezierCurveTo(points[0], points[1], points[2], points[3], points[4], points[5]);\n                    }\n                    break;\n                case PathParser.QUAD_TO:\n                    if (ctx) {\n                        ctx.quadraticCurveTo(points[0], points[1], points[2], points[3]);\n                    }\n                    break;\n                case PathParser.ARC:\n                    {\n                        const [cx, cy, rx, ry, theta, dTheta, psi, fs] = points;\n                        const r = rx > ry ? rx : ry;\n                        const scaleX = rx > ry ? 1 : rx / ry;\n                        const scaleY = rx > ry ? ry / rx : 1;\n                        if (ctx) {\n                            ctx.translate(cx, cy);\n                            ctx.rotate(psi);\n                            ctx.scale(scaleX, scaleY);\n                            ctx.arc(0, 0, r, theta, theta + dTheta, Boolean(1 - fs));\n                            ctx.scale(1 / scaleX, 1 / scaleY);\n                            ctx.rotate(-psi);\n                            ctx.translate(-cx, -cy);\n                        }\n                        break;\n                    }\n                case PathParser.CLOSE_PATH:\n                    if (ctx) {\n                        ctx.closePath();\n                    }\n                    break;\n            }\n        });\n    }\n    renderChildren(ctx) {\n        this.setTextData(ctx);\n        ctx.save();\n        const textDecoration = this.parent.getStyle('text-decoration').getString();\n        const fontSize = this.getFontSize();\n        const { glyphInfo  } = this;\n        const fill = ctx.fillStyle;\n        if (textDecoration === 'underline') {\n            ctx.beginPath();\n        }\n        glyphInfo.forEach((glyph, i)=>{\n            const { p0 , p1 , rotation , text: partialText  } = glyph;\n            ctx.save();\n            ctx.translate(p0.x, p0.y);\n            ctx.rotate(rotation);\n            if (ctx.fillStyle) {\n                ctx.fillText(partialText, 0, 0);\n            }\n            if (ctx.strokeStyle) {\n                ctx.strokeText(partialText, 0, 0);\n            }\n            ctx.restore();\n            if (textDecoration === 'underline') {\n                if (i === 0) {\n                    ctx.moveTo(p0.x, p0.y + fontSize / 8);\n                }\n                ctx.lineTo(p1.x, p1.y + fontSize / 5);\n            }\n        // // To assist with debugging visually, uncomment following\n        //\n        // ctx.beginPath();\n        // if (i % 2)\n        //   ctx.strokeStyle = 'red';\n        // else\n        //   ctx.strokeStyle = 'green';\n        // ctx.moveTo(p0.x, p0.y);\n        // ctx.lineTo(p1.x, p1.y);\n        // ctx.stroke();\n        // ctx.closePath();\n        });\n        if (textDecoration === 'underline') {\n            ctx.lineWidth = fontSize / 20;\n            ctx.strokeStyle = fill;\n            ctx.stroke();\n            ctx.closePath();\n        }\n        ctx.restore();\n    }\n    getLetterSpacingAt() {\n        let idx = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 0;\n        return this.letterSpacingCache[idx] || 0;\n    }\n    findSegmentToFitChar(ctx, anchor, textFullWidth, fullPathWidth, spacesNumber, inputOffset, dy, c, charI) {\n        let offset = inputOffset;\n        let glyphWidth = this.measureText(ctx, c);\n        if (c === ' ' && anchor === 'justify' && textFullWidth < fullPathWidth) {\n            glyphWidth += (fullPathWidth - textFullWidth) / spacesNumber;\n        }\n        if (charI > -1) {\n            offset += this.getLetterSpacingAt(charI);\n        }\n        const splineStep = this.textHeight / 20;\n        const p0 = this.getEquidistantPointOnPath(offset, splineStep, 0);\n        const p1 = this.getEquidistantPointOnPath(offset + glyphWidth, splineStep, 0);\n        const segment = {\n            p0,\n            p1\n        };\n        const rotation = p0 && p1 ? Math.atan2(p1.y - p0.y, p1.x - p0.x) : 0;\n        if (dy) {\n            const dyX = Math.cos(Math.PI / 2 + rotation) * dy;\n            const dyY = Math.cos(-rotation) * dy;\n            segment.p0 = {\n                ...p0,\n                x: p0.x + dyX,\n                y: p0.y + dyY\n            };\n            segment.p1 = {\n                ...p1,\n                x: p1.x + dyX,\n                y: p1.y + dyY\n            };\n        }\n        offset += glyphWidth;\n        return {\n            offset,\n            segment,\n            rotation\n        };\n    }\n    measureText(ctx, text) {\n        const { measuresCache  } = this;\n        const targetText = text || this.getText();\n        if (measuresCache.has(targetText)) {\n            return measuresCache.get(targetText);\n        }\n        const measure = this.measureTargetText(ctx, targetText);\n        measuresCache.set(targetText, measure);\n        return measure;\n    }\n    // This method supposes what all custom fonts already loaded.\n    // If some font will be loaded after this method call, <textPath> will not be rendered correctly.\n    // You need to call this method manually to update glyphs cache.\n    setTextData(ctx) {\n        if (this.glyphInfo) {\n            return;\n        }\n        const renderText = this.getText();\n        const chars = renderText.split('');\n        const spacesNumber = renderText.split(' ').length - 1;\n        const dx = this.parent.getAttribute('dx').split().map((_)=>_.getPixels('x')\n        );\n        const dy = this.parent.getAttribute('dy').getPixels('y');\n        const anchor = this.parent.getStyle('text-anchor').getString('start');\n        const thisSpacing = this.getStyle('letter-spacing');\n        const parentSpacing = this.parent.getStyle('letter-spacing');\n        let letterSpacing = 0;\n        if (!thisSpacing.hasValue() || thisSpacing.getValue() === 'inherit') {\n            letterSpacing = parentSpacing.getPixels();\n        } else if (thisSpacing.hasValue()) {\n            if (thisSpacing.getValue() !== 'initial' && thisSpacing.getValue() !== 'unset') {\n                letterSpacing = thisSpacing.getPixels();\n            }\n        }\n        // fill letter-spacing cache\n        const letterSpacingCache = [];\n        const textLen = renderText.length;\n        this.letterSpacingCache = letterSpacingCache;\n        for(let i1 = 0; i1 < textLen; i1++){\n            letterSpacingCache.push(typeof dx[i1] !== 'undefined' ? dx[i1] : letterSpacing);\n        }\n        const dxSum = letterSpacingCache.reduce((acc, cur, i)=>i === 0 ? 0 : acc + cur || 0\n        , 0);\n        const textWidth = this.measureText(ctx);\n        const textFullWidth = Math.max(textWidth + dxSum, 0);\n        this.textWidth = textWidth;\n        this.textHeight = this.getFontSize();\n        this.glyphInfo = [];\n        const fullPathWidth = this.getPathLength();\n        const startOffset = this.getStyle('startOffset').getNumber(0) * fullPathWidth;\n        let offset = 0;\n        if (anchor === 'middle' || anchor === 'center') {\n            offset = -textFullWidth / 2;\n        }\n        if (anchor === 'end' || anchor === 'right') {\n            offset = -textFullWidth;\n        }\n        offset += startOffset;\n        chars.forEach((char, i)=>{\n            // Find such segment what distance between p0 and p1 is approx. width of glyph\n            const { offset: nextOffset , segment , rotation  } = this.findSegmentToFitChar(ctx, anchor, textFullWidth, fullPathWidth, spacesNumber, offset, dy, char, i);\n            offset = nextOffset;\n            if (!segment.p0 || !segment.p1) {\n                return;\n            }\n            // const width = this.getLineLength(\n            //   segment.p0.x,\n            //   segment.p0.y,\n            //   segment.p1.x,\n            //   segment.p1.y\n            // );\n            // Note: Since glyphs are rendered one at a time, any kerning pair data built into the font will not be used.\n            // Can foresee having a rough pair table built in that the developer can override as needed.\n            // Or use \"dx\" attribute of the <text> node as a naive replacement\n            // const kern = 0;\n            // placeholder for future implementation\n            // const midpoint = this.getPointOnLine(\n            //   kern + width / 2.0,\n            //   segment.p0.x, segment.p0.y, segment.p1.x, segment.p1.y\n            // );\n            this.glyphInfo.push({\n                // transposeX: midpoint.x,\n                // transposeY: midpoint.y,\n                text: chars[i],\n                p0: segment.p0,\n                p1: segment.p1,\n                rotation\n            });\n        });\n    }\n    parsePathData(path) {\n        this.pathLength = -1 // reset path length\n        ;\n        if (!path) {\n            return [];\n        }\n        const pathCommands = [];\n        const { pathParser  } = path;\n        pathParser.reset();\n        // convert l, H, h, V, and v to L\n        while(!pathParser.isEnd()){\n            const { current  } = pathParser;\n            const startX = current ? current.x : 0;\n            const startY = current ? current.y : 0;\n            const command = pathParser.next();\n            let nextCommandType = command.type;\n            let points = [];\n            switch(command.type){\n                case PathParser.MOVE_TO:\n                    this.pathM(pathParser, points);\n                    break;\n                case PathParser.LINE_TO:\n                    nextCommandType = this.pathL(pathParser, points);\n                    break;\n                case PathParser.HORIZ_LINE_TO:\n                    nextCommandType = this.pathH(pathParser, points);\n                    break;\n                case PathParser.VERT_LINE_TO:\n                    nextCommandType = this.pathV(pathParser, points);\n                    break;\n                case PathParser.CURVE_TO:\n                    this.pathC(pathParser, points);\n                    break;\n                case PathParser.SMOOTH_CURVE_TO:\n                    nextCommandType = this.pathS(pathParser, points);\n                    break;\n                case PathParser.QUAD_TO:\n                    this.pathQ(pathParser, points);\n                    break;\n                case PathParser.SMOOTH_QUAD_TO:\n                    nextCommandType = this.pathT(pathParser, points);\n                    break;\n                case PathParser.ARC:\n                    points = this.pathA(pathParser);\n                    break;\n                case PathParser.CLOSE_PATH:\n                    PathElement.pathZ(pathParser);\n                    break;\n            }\n            if (command.type !== PathParser.CLOSE_PATH) {\n                pathCommands.push({\n                    type: nextCommandType,\n                    points,\n                    start: {\n                        x: startX,\n                        y: startY\n                    },\n                    pathLength: this.calcLength(startX, startY, nextCommandType, points)\n                });\n            } else {\n                pathCommands.push({\n                    type: PathParser.CLOSE_PATH,\n                    points: [],\n                    pathLength: 0\n                });\n            }\n        }\n        return pathCommands;\n    }\n    pathM(pathParser, points) {\n        const { x , y  } = PathElement.pathM(pathParser).point;\n        points.push(x, y);\n    }\n    pathL(pathParser, points) {\n        const { x , y  } = PathElement.pathL(pathParser).point;\n        points.push(x, y);\n        return PathParser.LINE_TO;\n    }\n    pathH(pathParser, points) {\n        const { x , y  } = PathElement.pathH(pathParser).point;\n        points.push(x, y);\n        return PathParser.LINE_TO;\n    }\n    pathV(pathParser, points) {\n        const { x , y  } = PathElement.pathV(pathParser).point;\n        points.push(x, y);\n        return PathParser.LINE_TO;\n    }\n    pathC(pathParser, points) {\n        const { point , controlPoint , currentPoint  } = PathElement.pathC(pathParser);\n        points.push(point.x, point.y, controlPoint.x, controlPoint.y, currentPoint.x, currentPoint.y);\n    }\n    pathS(pathParser, points) {\n        const { point , controlPoint , currentPoint  } = PathElement.pathS(pathParser);\n        points.push(point.x, point.y, controlPoint.x, controlPoint.y, currentPoint.x, currentPoint.y);\n        return PathParser.CURVE_TO;\n    }\n    pathQ(pathParser, points) {\n        const { controlPoint , currentPoint  } = PathElement.pathQ(pathParser);\n        points.push(controlPoint.x, controlPoint.y, currentPoint.x, currentPoint.y);\n    }\n    pathT(pathParser, points) {\n        const { controlPoint , currentPoint  } = PathElement.pathT(pathParser);\n        points.push(controlPoint.x, controlPoint.y, currentPoint.x, currentPoint.y);\n        return PathParser.QUAD_TO;\n    }\n    pathA(pathParser) {\n        let { rX , rY , sweepFlag , xAxisRotation , centp , a1 , ad  } = PathElement.pathA(pathParser);\n        if (sweepFlag === 0 && ad > 0) {\n            ad -= 2 * Math.PI;\n        }\n        if (sweepFlag === 1 && ad < 0) {\n            ad += 2 * Math.PI;\n        }\n        return [\n            centp.x,\n            centp.y,\n            rX,\n            rY,\n            a1,\n            ad,\n            xAxisRotation,\n            sweepFlag\n        ];\n    }\n    calcLength(x, y, commandType, points) {\n        let len = 0;\n        let p1 = null;\n        let p2 = null;\n        let t = 0;\n        switch(commandType){\n            case PathParser.LINE_TO:\n                return this.getLineLength(x, y, points[0], points[1]);\n            case PathParser.CURVE_TO:\n                // Approximates by breaking curve into 100 line segments\n                len = 0;\n                p1 = this.getPointOnCubicBezier(0, x, y, points[0], points[1], points[2], points[3], points[4], points[5]);\n                for(t = 0.01; t <= 1; t += 0.01){\n                    p2 = this.getPointOnCubicBezier(t, x, y, points[0], points[1], points[2], points[3], points[4], points[5]);\n                    len += this.getLineLength(p1.x, p1.y, p2.x, p2.y);\n                    p1 = p2;\n                }\n                return len;\n            case PathParser.QUAD_TO:\n                // Approximates by breaking curve into 100 line segments\n                len = 0;\n                p1 = this.getPointOnQuadraticBezier(0, x, y, points[0], points[1], points[2], points[3]);\n                for(t = 0.01; t <= 1; t += 0.01){\n                    p2 = this.getPointOnQuadraticBezier(t, x, y, points[0], points[1], points[2], points[3]);\n                    len += this.getLineLength(p1.x, p1.y, p2.x, p2.y);\n                    p1 = p2;\n                }\n                return len;\n            case PathParser.ARC:\n                {\n                    // Approximates by breaking curve into line segments\n                    len = 0;\n                    const start = points[4];\n                    // 4 = theta\n                    const dTheta = points[5];\n                    // 5 = dTheta\n                    const end = points[4] + dTheta;\n                    let inc = Math.PI / 180;\n                    // 1 degree resolution\n                    if (Math.abs(start - end) < inc) {\n                        inc = Math.abs(start - end);\n                    }\n                    // Note: for purpose of calculating arc length, not going to worry about rotating X-axis by angle psi\n                    p1 = this.getPointOnEllipticalArc(points[0], points[1], points[2], points[3], start, 0);\n                    if (dTheta < 0) {\n                        for(t = start - inc; t > end; t -= inc){\n                            p2 = this.getPointOnEllipticalArc(points[0], points[1], points[2], points[3], t, 0);\n                            len += this.getLineLength(p1.x, p1.y, p2.x, p2.y);\n                            p1 = p2;\n                        }\n                    } else {\n                        for(t = start + inc; t < end; t += inc){\n                            p2 = this.getPointOnEllipticalArc(points[0], points[1], points[2], points[3], t, 0);\n                            len += this.getLineLength(p1.x, p1.y, p2.x, p2.y);\n                            p1 = p2;\n                        }\n                    }\n                    p2 = this.getPointOnEllipticalArc(points[0], points[1], points[2], points[3], end, 0);\n                    len += this.getLineLength(p1.x, p1.y, p2.x, p2.y);\n                    return len;\n                }\n        }\n        return 0;\n    }\n    getPointOnLine(dist, p1x, p1y, p2x, p2y) {\n        let fromX = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : p1x, fromY = arguments.length > 6 && arguments[6] !== void 0 ? arguments[6] : p1y;\n        const m = (p2y - p1y) / (p2x - p1x + PSEUDO_ZERO);\n        let run = Math.sqrt(dist * dist / (1 + m * m));\n        if (p2x < p1x) {\n            run *= -1;\n        }\n        let rise = m * run;\n        let pt = null;\n        if (p2x === p1x) {\n            pt = {\n                x: fromX,\n                y: fromY + rise\n            };\n        } else if ((fromY - p1y) / (fromX - p1x + PSEUDO_ZERO) === m) {\n            pt = {\n                x: fromX + run,\n                y: fromY + rise\n            };\n        } else {\n            let ix = 0;\n            let iy = 0;\n            const len = this.getLineLength(p1x, p1y, p2x, p2y);\n            if (len < PSEUDO_ZERO) {\n                return null;\n            }\n            let u = (fromX - p1x) * (p2x - p1x) + (fromY - p1y) * (p2y - p1y);\n            u /= len * len;\n            ix = p1x + u * (p2x - p1x);\n            iy = p1y + u * (p2y - p1y);\n            const pRise = this.getLineLength(fromX, fromY, ix, iy);\n            const pRun = Math.sqrt(dist * dist - pRise * pRise);\n            run = Math.sqrt(pRun * pRun / (1 + m * m));\n            if (p2x < p1x) {\n                run *= -1;\n            }\n            rise = m * run;\n            pt = {\n                x: ix + run,\n                y: iy + rise\n            };\n        }\n        return pt;\n    }\n    getPointOnPath(distance) {\n        const fullLen = this.getPathLength();\n        let cumulativePathLength = 0;\n        let p = null;\n        if (distance < -0.00005 || distance - 0.00005 > fullLen) {\n            return null;\n        }\n        const { dataArray  } = this;\n        for (const command of dataArray){\n            if (command && (command.pathLength < 0.00005 || cumulativePathLength + command.pathLength + 0.00005 < distance)) {\n                cumulativePathLength += command.pathLength;\n                continue;\n            }\n            const delta = distance - cumulativePathLength;\n            let currentT = 0;\n            switch(command.type){\n                case PathParser.LINE_TO:\n                    p = this.getPointOnLine(delta, command.start.x, command.start.y, command.points[0], command.points[1], command.start.x, command.start.y);\n                    break;\n                case PathParser.ARC:\n                    {\n                        const start = command.points[4];\n                        // 4 = theta\n                        const dTheta = command.points[5];\n                        // 5 = dTheta\n                        const end = command.points[4] + dTheta;\n                        currentT = start + delta / command.pathLength * dTheta;\n                        if (dTheta < 0 && currentT < end || dTheta >= 0 && currentT > end) {\n                            break;\n                        }\n                        p = this.getPointOnEllipticalArc(command.points[0], command.points[1], command.points[2], command.points[3], currentT, command.points[6]);\n                        break;\n                    }\n                case PathParser.CURVE_TO:\n                    currentT = delta / command.pathLength;\n                    if (currentT > 1) {\n                        currentT = 1;\n                    }\n                    p = this.getPointOnCubicBezier(currentT, command.start.x, command.start.y, command.points[0], command.points[1], command.points[2], command.points[3], command.points[4], command.points[5]);\n                    break;\n                case PathParser.QUAD_TO:\n                    currentT = delta / command.pathLength;\n                    if (currentT > 1) {\n                        currentT = 1;\n                    }\n                    p = this.getPointOnQuadraticBezier(currentT, command.start.x, command.start.y, command.points[0], command.points[1], command.points[2], command.points[3]);\n                    break;\n            }\n            if (p) {\n                return p;\n            }\n            break;\n        }\n        return null;\n    }\n    getLineLength(x1, y1, x2, y2) {\n        return Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));\n    }\n    getPathLength() {\n        if (this.pathLength === -1) {\n            this.pathLength = this.dataArray.reduce((length, command)=>command.pathLength > 0 ? length + command.pathLength : length\n            , 0);\n        }\n        return this.pathLength;\n    }\n    getPointOnCubicBezier(pct, p1x, p1y, p2x, p2y, p3x, p3y, p4x, p4y) {\n        const x = p4x * CB1(pct) + p3x * CB2(pct) + p2x * CB3(pct) + p1x * CB4(pct);\n        const y = p4y * CB1(pct) + p3y * CB2(pct) + p2y * CB3(pct) + p1y * CB4(pct);\n        return {\n            x,\n            y\n        };\n    }\n    getPointOnQuadraticBezier(pct, p1x, p1y, p2x, p2y, p3x, p3y) {\n        const x = p3x * QB1(pct) + p2x * QB2(pct) + p1x * QB3(pct);\n        const y = p3y * QB1(pct) + p2y * QB2(pct) + p1y * QB3(pct);\n        return {\n            x,\n            y\n        };\n    }\n    getPointOnEllipticalArc(cx, cy, rx, ry, theta, psi) {\n        const cosPsi = Math.cos(psi);\n        const sinPsi = Math.sin(psi);\n        const pt = {\n            x: rx * Math.cos(theta),\n            y: ry * Math.sin(theta)\n        };\n        return {\n            x: cx + (pt.x * cosPsi - pt.y * sinPsi),\n            y: cy + (pt.x * sinPsi + pt.y * cosPsi)\n        };\n    }\n    // TODO need some optimisations. possibly build cache only for curved segments?\n    buildEquidistantCache(inputStep, inputPrecision) {\n        const fullLen = this.getPathLength();\n        const precision = inputPrecision || 0.25 // accuracy vs performance\n        ;\n        const step = inputStep || fullLen / 100;\n        if (!this.equidistantCache || this.equidistantCache.step !== step || this.equidistantCache.precision !== precision) {\n            // Prepare cache\n            this.equidistantCache = {\n                step,\n                precision,\n                points: []\n            };\n            // Calculate points\n            let s = 0;\n            for(let l = 0; l <= fullLen; l += precision){\n                const p0 = this.getPointOnPath(l);\n                const p1 = this.getPointOnPath(l + precision);\n                if (!p0 || !p1) {\n                    continue;\n                }\n                s += this.getLineLength(p0.x, p0.y, p1.x, p1.y);\n                if (s >= step) {\n                    this.equidistantCache.points.push({\n                        x: p0.x,\n                        y: p0.y,\n                        distance: l\n                    });\n                    s -= step;\n                }\n            }\n        }\n    }\n    getEquidistantPointOnPath(targetDistance, step, precision) {\n        this.buildEquidistantCache(step, precision);\n        if (targetDistance < 0 || targetDistance - this.getPathLength() > 0.00005) {\n            return null;\n        }\n        const idx = Math.round(targetDistance / this.getPathLength() * (this.equidistantCache.points.length - 1));\n        return this.equidistantCache.points[idx] || null;\n    }\n    constructor(document, node, captureTextNodes){\n        super(document, node, captureTextNodes);\n        this.type = 'textPath';\n        this.textWidth = 0;\n        this.textHeight = 0;\n        this.pathLength = -1;\n        this.glyphInfo = null;\n        this.letterSpacingCache = [];\n        this.measuresCache = new Map([\n            [\n                '',\n                0\n            ]\n        ]);\n        const pathElement = this.getHrefAttribute().getDefinition();\n        this.text = this.getTextFromNode();\n        this.dataArray = this.parsePathData(pathElement);\n    }\n}\n\n// groups: 1: mime-type (+ charset), 2: mime-type (w/o charset), 3: charset, 4: base64?, 5: body\nconst dataUriRegex = /^\\s*data:(([^/,;]+\\/[^/,;]+)(?:;([^,;=]+=[^,;=]+))?)?(?:;(base64))?,(.*)$/i;\nclass ImageElement extends RenderedElement {\n    async loadImage(href) {\n        try {\n            const image = await this.document.createImage(href);\n            this.image = image;\n        } catch (err) {\n            console.error(\"Error while loading image \\\"\".concat(href, \"\\\":\"), err);\n        }\n        this.loaded = true;\n    }\n    async loadSvg(href) {\n        const match = dataUriRegex.exec(href);\n        if (match) {\n            const data = match[5];\n            if (data) {\n                if (match[4] === 'base64') {\n                    this.image = atob(data);\n                } else {\n                    this.image = decodeURIComponent(data);\n                }\n            }\n        } else {\n            try {\n                const response = await this.document.fetch(href);\n                const svg = await response.text();\n                this.image = svg;\n            } catch (err) {\n                console.error(\"Error while loading image \\\"\".concat(href, \"\\\":\"), err);\n            }\n        }\n        this.loaded = true;\n    }\n    renderChildren(ctx) {\n        const { document , image , loaded  } = this;\n        const x = this.getAttribute('x').getPixels('x');\n        const y = this.getAttribute('y').getPixels('y');\n        const width = this.getStyle('width').getPixels('x');\n        const height = this.getStyle('height').getPixels('y');\n        if (!loaded || !image || !width || !height) {\n            return;\n        }\n        ctx.save();\n        ctx.translate(x, y);\n        if (typeof image === 'string') {\n            const subDocument = document.canvg.forkString(ctx, image, {\n                ignoreMouse: true,\n                ignoreAnimation: true,\n                ignoreDimensions: true,\n                ignoreClear: true,\n                offsetX: 0,\n                offsetY: 0,\n                scaleWidth: width,\n                scaleHeight: height\n            });\n            const { documentElement  } = subDocument.document;\n            if (documentElement) {\n                documentElement.parent = this;\n            }\n            void subDocument.render();\n        } else {\n            document.setViewBox({\n                ctx,\n                aspectRatio: this.getAttribute('preserveAspectRatio').getString(),\n                width,\n                desiredWidth: image.width,\n                height,\n                desiredHeight: image.height\n            });\n            if (this.loaded) {\n                if (!('complete' in image) || image.complete) {\n                    ctx.drawImage(image, 0, 0);\n                }\n            }\n        }\n        ctx.restore();\n    }\n    getBoundingBox() {\n        const x = this.getAttribute('x').getPixels('x');\n        const y = this.getAttribute('y').getPixels('y');\n        const width = this.getStyle('width').getPixels('x');\n        const height = this.getStyle('height').getPixels('y');\n        return new BoundingBox(x, y, x + width, y + height);\n    }\n    constructor(document, node, captureTextNodes){\n        super(document, node, captureTextNodes);\n        this.type = 'image';\n        this.loaded = false;\n        const href = this.getHrefAttribute().getString();\n        if (!href) {\n            return;\n        }\n        const isSvg = href.endsWith('.svg') || /^\\s*data:image\\/svg\\+xml/i.test(href);\n        document.images.push(this);\n        if (!isSvg) {\n            void this.loadImage(href);\n        } else {\n            void this.loadSvg(href);\n        }\n    }\n}\n\nclass SymbolElement extends RenderedElement {\n    render(_) {\n    // NO RENDER\n    }\n    constructor(...args){\n        super(...args);\n        this.type = 'symbol';\n    }\n}\n\nclass SVGFontLoader {\n    async load(fontFamily, url) {\n        try {\n            const { document  } = this;\n            const svgDocument = await document.canvg.parser.load(url);\n            const fonts = svgDocument.getElementsByTagName('font');\n            Array.from(fonts).forEach((fontNode)=>{\n                const font = document.createElement(fontNode);\n                document.definitions[fontFamily] = font;\n            });\n        } catch (err) {\n            console.error(\"Error while loading font \\\"\".concat(url, \"\\\":\"), err);\n        }\n        this.loaded = true;\n    }\n    constructor(document){\n        this.document = document;\n        this.loaded = false;\n        document.fonts.push(this);\n    }\n}\n\nclass StyleElement extends Element {\n    constructor(document, node, captureTextNodes){\n        super(document, node, captureTextNodes);\n        this.type = 'style';\n        const css = compressSpaces(Array.from(node.childNodes)// NEED TEST\n        .map((_)=>_.textContent\n        ).join('').replace(/(\\/\\*([^*]|[\\r\\n]|(\\*+([^*/]|[\\r\\n])))*\\*+\\/)|(^[\\s]*\\/\\/.*)/gm, '') // remove comments\n        .replace(/@import.*;/g, '') // remove imports\n        );\n        const cssDefs = css.split('}');\n        cssDefs.forEach((_1)=>{\n            const def = _1.trim();\n            if (!def) {\n                return;\n            }\n            const cssParts = def.split('{');\n            const cssClasses = cssParts[0].split(',');\n            const cssProps = cssParts[1].split(';');\n            cssClasses.forEach((_)=>{\n                const cssClass = _.trim();\n                if (!cssClass) {\n                    return;\n                }\n                const props = document.styles[cssClass] || {};\n                cssProps.forEach((cssProp)=>{\n                    const prop = cssProp.indexOf(':');\n                    const name = cssProp.substr(0, prop).trim();\n                    const value = cssProp.substr(prop + 1, cssProp.length - prop).trim();\n                    if (name && value) {\n                        props[name] = new Property(document, name, value);\n                    }\n                });\n                document.styles[cssClass] = props;\n                document.stylesSpecificity[cssClass] = getSelectorSpecificity(cssClass);\n                if (cssClass === '@font-face') {\n                    const fontFamily = props['font-family'].getString().replace(/\"|'/g, '');\n                    const srcs = props.src.getString().split(',');\n                    srcs.forEach((src)=>{\n                        if (src.indexOf('format(\"svg\")') > 0) {\n                            const url = parseExternalUrl(src);\n                            if (url) {\n                                void new SVGFontLoader(document).load(fontFamily, url);\n                            }\n                        }\n                    });\n                }\n            });\n        });\n    }\n}\nStyleElement.parseExternalUrl = parseExternalUrl;\n\nclass UseElement extends RenderedElement {\n    setContext(ctx) {\n        super.setContext(ctx);\n        const xAttr = this.getAttribute('x');\n        const yAttr = this.getAttribute('y');\n        if (xAttr.hasValue()) {\n            ctx.translate(xAttr.getPixels('x'), 0);\n        }\n        if (yAttr.hasValue()) {\n            ctx.translate(0, yAttr.getPixels('y'));\n        }\n    }\n    path(ctx) {\n        const { element  } = this;\n        if (element) {\n            element.path(ctx);\n        }\n    }\n    renderChildren(ctx) {\n        const { document , element  } = this;\n        if (element) {\n            let tempSvg = element;\n            if (element.type === 'symbol') {\n                // render me using a temporary svg element in symbol cases (http://www.w3.org/TR/SVG/struct.html#UseElement)\n                tempSvg = new SVGElement(document);\n                tempSvg.attributes.viewBox = new Property(document, 'viewBox', element.getAttribute('viewBox').getString());\n                tempSvg.attributes.preserveAspectRatio = new Property(document, 'preserveAspectRatio', element.getAttribute('preserveAspectRatio').getString());\n                tempSvg.attributes.overflow = new Property(document, 'overflow', element.getAttribute('overflow').getString());\n                tempSvg.children = element.children;\n                // element is still the parent of the children\n                element.styles.opacity = new Property(document, 'opacity', this.calculateOpacity());\n            }\n            if (tempSvg.type === 'svg') {\n                const widthStyle = this.getStyle('width', false, true);\n                const heightStyle = this.getStyle('height', false, true);\n                // if symbol or svg, inherit width/height from me\n                if (widthStyle.hasValue()) {\n                    tempSvg.attributes.width = new Property(document, 'width', widthStyle.getString());\n                }\n                if (heightStyle.hasValue()) {\n                    tempSvg.attributes.height = new Property(document, 'height', heightStyle.getString());\n                }\n            }\n            const oldParent = tempSvg.parent;\n            tempSvg.parent = this;\n            tempSvg.render(ctx);\n            tempSvg.parent = oldParent;\n        }\n    }\n    getBoundingBox(ctx) {\n        const { element  } = this;\n        if (element) {\n            return element.getBoundingBox(ctx);\n        }\n        return null;\n    }\n    elementTransform() {\n        const { document , element  } = this;\n        if (!element) {\n            return null;\n        }\n        return Transform.fromElement(document, element);\n    }\n    get element() {\n        if (!this.cachedElement) {\n            this.cachedElement = this.getHrefAttribute().getDefinition();\n        }\n        return this.cachedElement;\n    }\n    constructor(...args){\n        super(...args);\n        this.type = 'use';\n    }\n}\n\nfunction imGet(img, x, y, width, _height, rgba) {\n    return img[y * width * 4 + x * 4 + rgba];\n}\nfunction imSet(img, x, y, width, _height, rgba, val) {\n    img[y * width * 4 + x * 4 + rgba] = val;\n}\nfunction m(matrix, i, v) {\n    const mi = matrix[i];\n    return mi * v;\n}\nfunction c(a, m1, m2, m3) {\n    return m1 + Math.cos(a) * m2 + Math.sin(a) * m3;\n}\nclass FeColorMatrixElement extends Element {\n    apply(ctx, _x, _y, width, height) {\n        // assuming x==0 && y==0 for now\n        const { includeOpacity , matrix  } = this;\n        const srcData = ctx.getImageData(0, 0, width, height);\n        for(let y = 0; y < height; y++){\n            for(let x = 0; x < width; x++){\n                const r = imGet(srcData.data, x, y, width, height, 0);\n                const g = imGet(srcData.data, x, y, width, height, 1);\n                const b = imGet(srcData.data, x, y, width, height, 2);\n                const a = imGet(srcData.data, x, y, width, height, 3);\n                let nr = m(matrix, 0, r) + m(matrix, 1, g) + m(matrix, 2, b) + m(matrix, 3, a) + m(matrix, 4, 1);\n                let ng = m(matrix, 5, r) + m(matrix, 6, g) + m(matrix, 7, b) + m(matrix, 8, a) + m(matrix, 9, 1);\n                let nb = m(matrix, 10, r) + m(matrix, 11, g) + m(matrix, 12, b) + m(matrix, 13, a) + m(matrix, 14, 1);\n                let na = m(matrix, 15, r) + m(matrix, 16, g) + m(matrix, 17, b) + m(matrix, 18, a) + m(matrix, 19, 1);\n                if (includeOpacity) {\n                    nr = 0;\n                    ng = 0;\n                    nb = 0;\n                    na *= a / 255;\n                }\n                imSet(srcData.data, x, y, width, height, 0, nr);\n                imSet(srcData.data, x, y, width, height, 1, ng);\n                imSet(srcData.data, x, y, width, height, 2, nb);\n                imSet(srcData.data, x, y, width, height, 3, na);\n            }\n        }\n        ctx.clearRect(0, 0, width, height);\n        ctx.putImageData(srcData, 0, 0);\n    }\n    constructor(document, node, captureTextNodes){\n        super(document, node, captureTextNodes);\n        this.type = 'feColorMatrix';\n        let matrix = toNumbers(this.getAttribute('values').getString());\n        switch(this.getAttribute('type').getString('matrix')){\n            case 'saturate':\n                {\n                    const s = matrix[0];\n                    /* eslint-disable array-element-newline */ matrix = [\n                        0.213 + 0.787 * s,\n                        0.715 - 0.715 * s,\n                        0.072 - 0.072 * s,\n                        0,\n                        0,\n                        0.213 - 0.213 * s,\n                        0.715 + 0.285 * s,\n                        0.072 - 0.072 * s,\n                        0,\n                        0,\n                        0.213 - 0.213 * s,\n                        0.715 - 0.715 * s,\n                        0.072 + 0.928 * s,\n                        0,\n                        0,\n                        0,\n                        0,\n                        0,\n                        1,\n                        0,\n                        0,\n                        0,\n                        0,\n                        0,\n                        1\n                    ];\n                    break;\n                }\n            case 'hueRotate':\n                {\n                    const a = matrix[0] * Math.PI / 180;\n                    /* eslint-disable array-element-newline */ matrix = [\n                        c(a, 0.213, 0.787, -0.213),\n                        c(a, 0.715, -0.715, -0.715),\n                        c(a, 0.072, -0.072, 0.928),\n                        0,\n                        0,\n                        c(a, 0.213, -0.213, 0.143),\n                        c(a, 0.715, 0.285, 0.14),\n                        c(a, 0.072, -0.072, -0.283),\n                        0,\n                        0,\n                        c(a, 0.213, -0.213, -0.787),\n                        c(a, 0.715, -0.715, 0.715),\n                        c(a, 0.072, 0.928, 0.072),\n                        0,\n                        0,\n                        0,\n                        0,\n                        0,\n                        1,\n                        0,\n                        0,\n                        0,\n                        0,\n                        0,\n                        1\n                    ];\n                    break;\n                }\n            case 'luminanceToAlpha':\n                /* eslint-disable array-element-newline */ matrix = [\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0.2125,\n                    0.7154,\n                    0.0721,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    1\n                ];\n                break;\n        }\n        this.matrix = matrix;\n        this.includeOpacity = this.getAttribute('includeOpacity').hasValue();\n    }\n}\n\nclass MaskElement extends Element {\n    apply(ctx, element) {\n        const { document  } = this;\n        // render as temp svg\n        let x = this.getAttribute('x').getPixels('x');\n        let y = this.getAttribute('y').getPixels('y');\n        let width = this.getStyle('width').getPixels('x');\n        let height = this.getStyle('height').getPixels('y');\n        if (!width && !height) {\n            const boundingBox = new BoundingBox();\n            this.children.forEach((child)=>{\n                boundingBox.addBoundingBox(child.getBoundingBox(ctx));\n            });\n            x = Math.floor(boundingBox.x1);\n            y = Math.floor(boundingBox.y1);\n            width = Math.floor(boundingBox.width);\n            height = Math.floor(boundingBox.height);\n        }\n        const ignoredStyles = this.removeStyles(element, MaskElement.ignoreStyles);\n        const maskCanvas = document.createCanvas(x + width, y + height);\n        const maskCtx = maskCanvas.getContext('2d');\n        document.screen.setDefaults(maskCtx);\n        this.renderChildren(maskCtx);\n        // convert mask to alpha with a fake node\n        // TODO: refactor out apply from feColorMatrix\n        new FeColorMatrixElement(document, {\n            nodeType: 1,\n            childNodes: [],\n            attributes: [\n                {\n                    nodeName: 'type',\n                    value: 'luminanceToAlpha'\n                },\n                {\n                    nodeName: 'includeOpacity',\n                    value: 'true'\n                }\n            ]\n        }).apply(maskCtx, 0, 0, x + width, y + height);\n        const tmpCanvas = document.createCanvas(x + width, y + height);\n        const tmpCtx = tmpCanvas.getContext('2d');\n        document.screen.setDefaults(tmpCtx);\n        element.render(tmpCtx);\n        tmpCtx.globalCompositeOperation = 'destination-in';\n        tmpCtx.fillStyle = maskCtx.createPattern(maskCanvas, 'no-repeat');\n        tmpCtx.fillRect(0, 0, x + width, y + height);\n        ctx.fillStyle = tmpCtx.createPattern(tmpCanvas, 'no-repeat');\n        ctx.fillRect(0, 0, x + width, y + height);\n        // reassign mask\n        this.restoreStyles(element, ignoredStyles);\n    }\n    render(_) {\n    // NO RENDER\n    }\n    constructor(...args){\n        super(...args);\n        this.type = 'mask';\n    }\n}\nMaskElement.ignoreStyles = [\n    'mask',\n    'transform',\n    'clip-path'\n];\n\nconst noop = ()=>{\n// NOOP\n};\nclass ClipPathElement extends Element {\n    apply(ctx) {\n        const { document  } = this;\n        const contextProto = Reflect.getPrototypeOf(ctx);\n        const { beginPath , closePath  } = ctx;\n        if (contextProto) {\n            contextProto.beginPath = noop;\n            contextProto.closePath = noop;\n        }\n        Reflect.apply(beginPath, ctx, []);\n        this.children.forEach((child)=>{\n            if (!('path' in child)) {\n                return;\n            }\n            let transform = 'elementTransform' in child ? child.elementTransform() : null // handle <use />\n            ;\n            if (!transform) {\n                transform = Transform.fromElement(document, child);\n            }\n            if (transform) {\n                transform.apply(ctx);\n            }\n            child.path(ctx);\n            if (contextProto) {\n                contextProto.closePath = closePath;\n            }\n            if (transform) {\n                transform.unapply(ctx);\n            }\n        });\n        Reflect.apply(closePath, ctx, []);\n        ctx.clip();\n        if (contextProto) {\n            contextProto.beginPath = beginPath;\n            contextProto.closePath = closePath;\n        }\n    }\n    render(_) {\n    // NO RENDER\n    }\n    constructor(...args){\n        super(...args);\n        this.type = 'clipPath';\n    }\n}\n\nclass FilterElement extends Element {\n    apply(ctx, element) {\n        // render as temp svg\n        const { document , children  } = this;\n        const boundingBox = 'getBoundingBox' in element ? element.getBoundingBox(ctx) : null;\n        if (!boundingBox) {\n            return;\n        }\n        let px = 0;\n        let py = 0;\n        children.forEach((child)=>{\n            const efd = child.extraFilterDistance || 0;\n            px = Math.max(px, efd);\n            py = Math.max(py, efd);\n        });\n        const width = Math.floor(boundingBox.width);\n        const height = Math.floor(boundingBox.height);\n        const tmpCanvasWidth = width + 2 * px;\n        const tmpCanvasHeight = height + 2 * py;\n        if (tmpCanvasWidth < 1 || tmpCanvasHeight < 1) {\n            return;\n        }\n        const x = Math.floor(boundingBox.x);\n        const y = Math.floor(boundingBox.y);\n        const ignoredStyles = this.removeStyles(element, FilterElement.ignoreStyles);\n        const tmpCanvas = document.createCanvas(tmpCanvasWidth, tmpCanvasHeight);\n        const tmpCtx = tmpCanvas.getContext('2d');\n        document.screen.setDefaults(tmpCtx);\n        tmpCtx.translate(-x + px, -y + py);\n        element.render(tmpCtx);\n        // apply filters\n        children.forEach((child)=>{\n            if (typeof child.apply === 'function') {\n                child.apply(tmpCtx, 0, 0, tmpCanvasWidth, tmpCanvasHeight);\n            }\n        });\n        // render on me\n        ctx.drawImage(tmpCanvas, 0, 0, tmpCanvasWidth, tmpCanvasHeight, x - px, y - py, tmpCanvasWidth, tmpCanvasHeight);\n        this.restoreStyles(element, ignoredStyles);\n    }\n    render(_) {\n    // NO RENDER\n    }\n    constructor(...args){\n        super(...args);\n        this.type = 'filter';\n    }\n}\nFilterElement.ignoreStyles = [\n    'filter',\n    'transform',\n    'clip-path'\n];\n\nclass FeDropShadowElement extends Element {\n    apply(_, _x, _y, _width, _height) {\n    // TODO: implement\n    }\n    constructor(document, node, captureTextNodes){\n        super(document, node, captureTextNodes);\n        this.type = 'feDropShadow';\n        this.addStylesFromStyleDefinition();\n    }\n}\n\nclass FeMorphologyElement extends Element {\n    apply(_, _x, _y, _width, _height) {\n    // TODO: implement\n    }\n    constructor(...args){\n        super(...args);\n        this.type = 'feMorphology';\n    }\n}\n\nclass FeCompositeElement extends Element {\n    apply(_, _x, _y, _width, _height) {\n    // TODO: implement\n    }\n    constructor(...args){\n        super(...args);\n        this.type = 'feComposite';\n    }\n}\n\nclass FeGaussianBlurElement extends Element {\n    apply(ctx, x, y, width, height) {\n        const { document , blurRadius  } = this;\n        const body = document.window ? document.window.document.body : null;\n        const canvas = ctx.canvas;\n        // StackBlur requires canvas be on document\n        canvas.id = document.getUniqueId();\n        if (body) {\n            canvas.style.display = 'none';\n            body.appendChild(canvas);\n        }\n        (0,stackblur_canvas__WEBPACK_IMPORTED_MODULE_3__.canvasRGBA)(canvas, x, y, width, height, blurRadius);\n        if (body) {\n            body.removeChild(canvas);\n        }\n    }\n    constructor(document, node, captureTextNodes){\n        super(document, node, captureTextNodes);\n        this.type = 'feGaussianBlur';\n        this.blurRadius = Math.floor(this.getAttribute('stdDeviation').getNumber());\n        this.extraFilterDistance = this.blurRadius;\n    }\n}\n\nclass TitleElement extends Element {\n    constructor(...args){\n        super(...args);\n        this.type = 'title';\n    }\n}\n\nclass DescElement extends Element {\n    constructor(...args){\n        super(...args);\n        this.type = 'desc';\n    }\n}\n\nconst elements = {\n    'svg': SVGElement,\n    'rect': RectElement,\n    'circle': CircleElement,\n    'ellipse': EllipseElement,\n    'line': LineElement,\n    'polyline': PolylineElement,\n    'polygon': PolygonElement,\n    'path': PathElement,\n    'pattern': PatternElement,\n    'marker': MarkerElement,\n    'defs': DefsElement,\n    'linearGradient': LinearGradientElement,\n    'radialGradient': RadialGradientElement,\n    'stop': StopElement,\n    'animate': AnimateElement,\n    'animateColor': AnimateColorElement,\n    'animateTransform': AnimateTransformElement,\n    'font': FontElement,\n    'font-face': FontFaceElement,\n    'missing-glyph': MissingGlyphElement,\n    'glyph': GlyphElement,\n    'text': TextElement,\n    'tspan': TSpanElement,\n    'tref': TRefElement,\n    'a': AElement,\n    'textPath': TextPathElement,\n    'image': ImageElement,\n    'g': GElement,\n    'symbol': SymbolElement,\n    'style': StyleElement,\n    'use': UseElement,\n    'mask': MaskElement,\n    'clipPath': ClipPathElement,\n    'filter': FilterElement,\n    'feDropShadow': FeDropShadowElement,\n    'feMorphology': FeMorphologyElement,\n    'feComposite': FeCompositeElement,\n    'feColorMatrix': FeColorMatrixElement,\n    'feGaussianBlur': FeGaussianBlurElement,\n    'title': TitleElement,\n    'desc': DescElement\n};\n\nfunction createCanvas(width, height) {\n    const canvas = document.createElement('canvas');\n    canvas.width = width;\n    canvas.height = height;\n    return canvas;\n}\nasync function createImage(src) {\n    let anonymousCrossOrigin = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;\n    const image = document.createElement('img');\n    if (anonymousCrossOrigin) {\n        image.crossOrigin = 'Anonymous';\n    }\n    return new Promise((resolve, reject)=>{\n        image.onload = ()=>{\n            resolve(image);\n        };\n        image.onerror = (_event, _source, _lineno, _colno, error)=>{\n            reject(error);\n        };\n        image.src = src;\n    });\n}\nconst DEFAULT_EM_SIZE = 12;\nclass Document {\n    bindCreateImage(createImage1, anonymousCrossOrigin) {\n        if (typeof anonymousCrossOrigin === 'boolean') {\n            return (source, forceAnonymousCrossOrigin)=>createImage1(source, typeof forceAnonymousCrossOrigin === 'boolean' ? forceAnonymousCrossOrigin : anonymousCrossOrigin)\n            ;\n        }\n        return createImage1;\n    }\n    get window() {\n        return this.screen.window;\n    }\n    get fetch() {\n        return this.screen.fetch;\n    }\n    get ctx() {\n        return this.screen.ctx;\n    }\n    get emSize() {\n        const { emSizeStack  } = this;\n        return emSizeStack[emSizeStack.length - 1] || DEFAULT_EM_SIZE;\n    }\n    set emSize(value) {\n        const { emSizeStack  } = this;\n        emSizeStack.push(value);\n    }\n    popEmSize() {\n        const { emSizeStack  } = this;\n        emSizeStack.pop();\n    }\n    getUniqueId() {\n        return \"canvg\".concat(++this.uniqueId);\n    }\n    isImagesLoaded() {\n        return this.images.every((_)=>_.loaded\n        );\n    }\n    isFontsLoaded() {\n        return this.fonts.every((_)=>_.loaded\n        );\n    }\n    createDocumentElement(document) {\n        const documentElement = this.createElement(document.documentElement);\n        documentElement.root = true;\n        documentElement.addStylesFromStyleDefinition();\n        this.documentElement = documentElement;\n        return documentElement;\n    }\n    createElement(node) {\n        const elementType = node.nodeName.replace(/^[^:]+:/, '');\n        const ElementType = Document.elementTypes[elementType];\n        if (ElementType) {\n            return new ElementType(this, node);\n        }\n        return new UnknownElement(this, node);\n    }\n    createTextNode(node) {\n        return new TextNode(this, node);\n    }\n    setViewBox(config) {\n        this.screen.setViewBox({\n            document: this,\n            ...config\n        });\n    }\n    constructor(canvg, { rootEmSize =DEFAULT_EM_SIZE , emSize =DEFAULT_EM_SIZE , createCanvas: createCanvas1 = Document.createCanvas , createImage: createImage2 = Document.createImage , anonymousCrossOrigin  } = {}){\n        this.canvg = canvg;\n        this.definitions = {};\n        this.styles = {};\n        this.stylesSpecificity = {};\n        this.images = [];\n        this.fonts = [];\n        this.emSizeStack = [];\n        this.uniqueId = 0;\n        this.screen = canvg.screen;\n        this.rootEmSize = rootEmSize;\n        this.emSize = emSize;\n        this.createCanvas = createCanvas1;\n        this.createImage = this.bindCreateImage(createImage2, anonymousCrossOrigin);\n        this.screen.wait(()=>this.isImagesLoaded()\n        );\n        this.screen.wait(()=>this.isFontsLoaded()\n        );\n    }\n}\nDocument.createCanvas = createCanvas;\nDocument.createImage = createImage;\nDocument.elementTypes = elements;\n\n/**\n * SVG renderer on canvas.\n */ class Canvg {\n    /**\n   * Create Canvg instance from SVG source string or URL.\n   * @param ctx - Rendering context.\n   * @param svg - SVG source string or URL.\n   * @param options - Rendering options.\n   * @returns Canvg instance.\n   */ static async from(ctx, svg) {\n        let options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};\n        const parser = new Parser(options);\n        const svgDocument = await parser.parse(svg);\n        return new Canvg(ctx, svgDocument, options);\n    }\n    /**\n   * Create Canvg instance from SVG source string.\n   * @param ctx - Rendering context.\n   * @param svg - SVG source string.\n   * @param options - Rendering options.\n   * @returns Canvg instance.\n   */ static fromString(ctx, svg) {\n        let options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};\n        const parser = new Parser(options);\n        const svgDocument = parser.parseFromString(svg);\n        return new Canvg(ctx, svgDocument, options);\n    }\n    /**\n   * Create new Canvg instance with inherited options.\n   * @param ctx - Rendering context.\n   * @param svg - SVG source string or URL.\n   * @param options - Rendering options.\n   * @returns Canvg instance.\n   */ fork(ctx, svg) {\n        let options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};\n        return Canvg.from(ctx, svg, {\n            ...this.options,\n            ...options\n        });\n    }\n    /**\n   * Create new Canvg instance with inherited options.\n   * @param ctx - Rendering context.\n   * @param svg - SVG source string.\n   * @param options - Rendering options.\n   * @returns Canvg instance.\n   */ forkString(ctx, svg) {\n        let options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};\n        return Canvg.fromString(ctx, svg, {\n            ...this.options,\n            ...options\n        });\n    }\n    /**\n   * Document is ready promise.\n   * @returns Ready promise.\n   */ ready() {\n        return this.screen.ready();\n    }\n    /**\n   * Document is ready value.\n   * @returns Is ready or not.\n   */ isReady() {\n        return this.screen.isReady();\n    }\n    /**\n   * Render only first frame, ignoring animations and mouse.\n   * @param options - Rendering options.\n   */ async render() {\n        let options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};\n        this.start({\n            enableRedraw: true,\n            ignoreAnimation: true,\n            ignoreMouse: true,\n            ...options\n        });\n        await this.ready();\n        this.stop();\n    }\n    /**\n   * Start rendering.\n   * @param options - Render options.\n   */ start() {\n        let options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};\n        const { documentElement , screen , options: baseOptions  } = this;\n        screen.start(documentElement, {\n            enableRedraw: true,\n            ...baseOptions,\n            ...options\n        });\n    }\n    /**\n   * Stop rendering.\n   */ stop() {\n        this.screen.stop();\n    }\n    /**\n   * Resize SVG to fit in given size.\n   * @param width\n   * @param height\n   * @param preserveAspectRatio\n   */ resize(width) {\n        let height = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : width, preserveAspectRatio = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;\n        this.documentElement.resize(width, height, preserveAspectRatio);\n    }\n    /**\n   * Main constructor.\n   * @param ctx - Rendering context.\n   * @param svg - SVG Document.\n   * @param options - Rendering options.\n   */ constructor(ctx, svg, options = {}){\n        this.parser = new Parser(options);\n        this.screen = new Screen(ctx, options);\n        this.options = options;\n        const document = new Document(this, options);\n        const documentElement = document.createDocumentElement(svg);\n        this.document = document;\n        this.documentElement = documentElement;\n    }\n}\n\n\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/canvg/dist/index.js\n");

/***/ })

};
;